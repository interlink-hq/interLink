"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7497],{8353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(85893),r=t(11151);t(19965),t(44996);const i={sidebar_position:6},a="Enable service accounts",o={id:"guides/enable-service-accounts",title:"Enable service accounts",description:"By default, InterLink does not translate Kubernetes Service Accounts from Pod into Plugin. That means workload that needs to interact with Kubernetes API like Argo will not work.",source:"@site/versioned_docs/version-0.5.x/guides/06-enable-service-accounts.mdx",sourceDirName:"guides",slug:"/guides/enable-service-accounts",permalink:"/docs/guides/enable-service-accounts",draft:!1,unlisted:!1,editUrl:"https://github.com/interlink-hq/interLink/versioned_docs/version-0.5.x/guides/06-enable-service-accounts.mdx",tags:[],version:"0.5.x",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"InterLink Monitoring System",permalink:"/docs/guides/monitoring"},next:{title:"mTLS Deployment Guide",permalink:"/docs/guides/mtls-deployment"}},l={},c=[{value:"Provide an external way to access Kubernetes API service",id:"provide-an-external-way-to-access-kubernetes-api-service",level:2},{value:"Design of ingress use",id:"design-of-ingress-use",level:3},{value:"NGINX HTTPS",id:"nginx-https",level:3},{value:"KIND cluster",id:"kind-cluster",level:4},{value:"Cloud cluster",id:"cloud-cluster",level:4},{value:"Baremetal cluster",id:"baremetal-cluster",level:4},{value:"Provide HTTPS certificate and its CA certificate",id:"provide-https-certificate-and-its-ca-certificate",level:2},{value:"Configure Ingress",id:"configure-ingress",level:3},{value:"Configure InterLink Helm Chart",id:"configure-interlink-helm-chart",level:2},{value:"Test your setup",id:"test-your-setup",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"enable-service-accounts",children:"Enable service accounts"}),"\n",(0,s.jsx)(n.p,{children:"By default, InterLink does not translate Kubernetes Service Accounts from Pod into Plugin. That means workload that needs to interact with Kubernetes API like Argo will not work."}),"\n",(0,s.jsx)(n.p,{children:"However after following deployment and configuration in this guide, InterLink will give means for Plugin for that. A test has been done with InterLink Slurm Plugin and Argo."}),"\n",(0,s.jsx)(n.p,{children:"There are two parts on this guide: how to deploy means to access Kubernetes API service from external cluster network, and how to configure InterLink so that Plugin can access it."}),"\n",(0,s.jsx)(n.p,{children:"The prerequisite of this guide are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"provide an external way to access Kubernetes API service (out of scope of InterLink, but an example is written below)"}),"\n",(0,s.jsx)(n.li,{children:"provide certificates (that can be self-signed), and its CA root certificate (also out of scope of InterLink, but an example is written below)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"provide-an-external-way-to-access-kubernetes-api-service",children:"Provide an external way to access Kubernetes API service"}),"\n",(0,s.jsxs)(n.p,{children:["By default, InterLink Plugin containers cannot access Kubernetes internal network. Thus they cannot access Kubernetes API service (",(0,s.jsx)(n.code,{children:"kubernetes.default.svc.cluster.local"}),"). Kubernetes offers ways to access internal services (see ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",children:"https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"}),"):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"LoadBalancer"}),"\n",(0,s.jsx)(n.li,{children:"NodePort"}),"\n",(0,s.jsx)(n.li,{children:"..."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Because this is highly dependent of the Kubernetes cluster infrastructure, this deployment is out of scope of InterLink automatic deployment. However, below are examples of how and what to deploy, using ingress. This requires a bit of Ingress knowledge as prerequisite."}),"\n",(0,s.jsx)(n.h3,{id:"design-of-ingress-use",children:"Design of ingress use"}),"\n",(0,s.jsx)(n.p,{children:"The Kubernetes cluster can already contain an Ingress resource to let external access to web services. However it is a best-practice to separate internal (meaning flow between Kubernetes and Plugin infrastructure, like Slurm machines) and external flows (meaning flow between Kubernetes and the world)."}),"\n",(0,s.jsx)(n.p,{children:"This guide will thus deploy as an example another ingress separate from the already existing ingress, if it exist. This also works if there is no ingress yet."}),"\n",(0,s.jsxs)(n.p,{children:["Here is a diagram (generated with ",(0,s.jsx)(n.a,{href:"https://asciiflow.com",children:"https://asciiflow.com"}),") with Interlink Slurm Plugin as example. This Kubernetes cluster is deployed next to a Slurm cluster, but it can also be deployed on cloud."]}),"\n",(0,s.jsx)(n.p,{children:'Because Ingress can only serve services in the same namespace, and because Kubernetes API is in default namespace, different from the Ingress "ingress-nginx-internal", a reverse-proxy NGINX HTTPS is instantiated to make Kubernetes API available to Ingress.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                               \n       \u2502                           \u2502                               \n       \u2502   Kubernetes cluster      \u2502                               \n       \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                               \n       \u2502\u2502K8S API \u251c\u2500\u2500\u2500\u2524Nginx HTTPS\u2502 \u2502                               \n       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                               \n       \u2502                   \u2502       \u2502               Slurm cluster   \n       \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502         \n         \u2502Ingress          \u2502Ingress            \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n         \u2502TCP 80, 443      \u2502TCP 6080, 60443      Slurm network     \n   \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u2502 External \u2502        \u2502 Internal \u2502                      \u2502         \n   \u2502 Firewall \u2502        \u2502 Firewall \u2502                      \u2502         \n   \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502         \n         \u2502                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Router \u251c\u2500\u2500\u2500\u2500\u2500\u2518         \n   xxxxxxxxx xxxx                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \n   x       xxx  xxx                                                \n  xx              x                                                \n xx  Internet     x                                                \nx            xxxxx                                                 \nx   x           xx                                                 \nxxxxxxx       xxx                                                  \n      xxxxxxxxx                                                    \n"})}),"\n",(0,s.jsx)(n.h3,{id:"nginx-https",children:"NGINX HTTPS"}),"\n",(0,s.jsx)(n.p,{children:"This deploys a reverse-proxy."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'cat <<EOF | tee ./nginx-values.yaml\nserverBlock: |-\n  server {\n    listen 0.0.0.0:60443;\n\n    real_ip_header X-Forwarded-For;\n    set_real_ip_from 0.0.0.0/0;\n\n    resolver kube-dns.kube-system.svc.cluster.local valid=30s;\n    set $upstream https://kubernetes.default.svc.cluster.local:443;\n\n    location / {\n      proxy_pass $upstream;\n    }\n  }\nservice:\n  # Avoid LoadBalancer type, to avoid external IP.\n  type: "ClusterIP"\n  ports:\n    http: 60443\n\ncontainerPorts:\n  http: 60443\nEOF\nhelm upgrade --install --create-namespace -n ingress-nginx-internal --version 16.0.3 my-nginx-kubernetes-api bitnami/nginx --values ./nginx-values.yaml\n'})}),"\n",(0,s.jsx)(n.h4,{id:"kind-cluster",children:"KIND cluster"}),"\n",(0,s.jsx)(n.p,{children:"Deploy KIND specific ingress-nginx ingress:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n# Replace by the target Chart helm version, see https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx\nhelmIngressNginx=4.11.3\nhelm upgrade --install my-ingress-nginx ingress-nginx/ingress-nginx --create-namespace -n ingress-nginx-internal --version "${helmIngressNginx}" \\\n  --values https://raw.githubusercontent.com/kubernetes/ingress-nginx/helm-chart-"${helmIngressNginx}"/hack/manifest-templates/provider/kind/values.yaml \\\n  --set controller.allowSnippetAnnotations=true \\\n  --set controller.hostPort.ports.http=6080 --set controller.hostPort.ports.https=60443 --set controller.ingressClassResource=nginx-internal\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then in KIND map the network ports like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'kind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnetworking:\n  # ipv6 not needed.\n  ipFamily: ipv4\nkubeadmConfigPatches:\n- |\n  kind: KubeletConfiguration\n  # See https://github.com/kubernetes-sigs/kind/issues/3359\n  localStorageCapacityIsolation: true\n#name: default\nnodes:\n# one node hosting a control plane\n- role: control-plane\n  labels:\n    ingress-ready: "true"\n  # For ingress: https://kind.sigs.k8s.io/docs/user/ingress/\n# kubeadmConfigPatches:\n# - |\n#   kind: InitConfiguration\n#   nodeRegistration:\n#     kubeletExtraArgs:\n#       node-labels: "ingress-ready=true"\n  extraPortMappings:\n  - containerPort: 6080\n    hostPort: 6080\n    protocol: TCP\n  - containerPort: 60443\n    hostPort: 60443\n    protocol: TCP\n- role: worker\n'})}),"\n",(0,s.jsx)(n.h4,{id:"cloud-cluster",children:"Cloud cluster"}),"\n",(0,s.jsx)(n.p,{children:"Deploy ingress and uses the Cloud Provider specific Loadbalancer (GCP, AWS, etc.). One can deploy ingress-nginx like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n# Replace by the target Chart helm version, see https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx\nhelmIngressNginx=4.11.3\nhelm upgrade --install my-ingress-nginx ingress-nginx/ingress-nginx --create-namespace -n ingress-nginx-internal --version "${helmIngressNginx}" \\\n  --set controller.hostPort.ports.http=6080 --set controller.hostPort.ports.https=60443 --set controller.ingressClassResource=nginx-internal\n'})}),"\n",(0,s.jsx)(n.h4,{id:"baremetal-cluster",children:"Baremetal cluster"}),"\n",(0,s.jsxs)(n.p,{children:["Deploy the MetalLB loadbalancer (see ",(0,s.jsx)(n.a,{href:"https://metallb.io/",children:"https://metallb.io/"}),").\nThis has some network prerequisites (like network in promiscuous mode, and dedicated IPs pools)."]}),"\n",(0,s.jsx)(n.h2,{id:"provide-https-certificate-and-its-ca-certificate",children:"Provide HTTPS certificate and its CA certificate"}),"\n",(0,s.jsxs)(n.p,{children:["Kubernetes API service can only be accessed using encrypted HTTPS flow. Kubelet is normally responsible for providing ",(0,s.jsx)(n.code,{children:"ca.crt"})," file that matches the Kubernetes API URL that it provides to containers: for example"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"KUBERNETES_PORT=tcp://10.96.0.1:443\nKUBERNETES_SERVICE_PORT=443\nKUBERNETES_PORT_443_TCP_ADDR=10.96.0.1\nKUBERNETES_PORT_443_TCP_PORT=443\nKUBERNETES_PORT_443_TCP_PROTO=tcp\nKUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443\nKUBERNETES_SERVICE_PORT_HTTPS=443\nKUBERNETES_SERVICE_HOST=10.96.0.1\n"})}),"\n",(0,s.jsx)(n.p,{children:"The former section describe how to access Kubernetes API externally, so an appropriate certificate needs to be generated. In this page, one convenient way to generate is to use certmanager."}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to use any third-party service (like Let's Encrypt) to generate certificates signed by a public root CA, and thus InterLink Virtual-Kubelet would not need to distribute a ",(0,s.jsx)(n.code,{children:"ca.crt"})," because root CA certificates are part of the OS of container image (if they are up to date)."]}),"\n",(0,s.jsx)(n.p,{children:"However, it is better and more convenient to generate certificates from an internal CA that has a self-signed certificate. Here is an example of how to deploy a certmanager:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'certManagerChartVersion="v1.14.5"\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/${certManagerChartVersion}/cert-manager.crds.yaml\nhelm repo add jetstack https://charts.jetstack.io\nhelm upgrade -i -n cert-manager cert-manager --create-namespace jetstack/cert-manager --wait --version "${certManagerChartVersion}"\n\ncat <<EOF | kubectl apply -n cert-manager -f -\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-root-issuer\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ingress-nginx-internal-root-ca\nspec:\n  isCA: true\n  commonName: ingress-nginx-internal-root-ca\n  secretName: ingress-nginx-internal-root-ca-secret\n  # To avoid rotation issue, 100 years = 100 * 365 * 24 h = 876000h\n  duration: "876000h"\n  privateKey:\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: selfsigned-root-issuer\n    kind: ClusterIssuer\n    group: cert-manager.io\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  ca:\n    secretName: ingress-nginx-internal-root-ca-secret\n #selfSigned: {}\nEOF\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configure-ingress",children:"Configure Ingress"}),"\n",(0,s.jsx)(n.p,{children:"Given the previous sections, the final step to provide access to Kubernetes API service, with a HTTPS certificate is to provide an ingress resource. Here is an example for KIND cluster, to be adapter for other types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'apiVersion: v1\nitems:\n- apiVersion: networking.k8s.io/v1\n  kind: Ingress\n  metadata:\n    annotations:\n      acme.cert-manager.io/http01-edit-in-place: "true"\n      # To avoid rotation issue, 100 years = 100 * 365 * 24 h = 876000h\n      cert-manager.io/duration: 876000h\n      cert-manager.io/issuer: selfsigned-issuer\n    name: default\n    namespace: ingress-nginx-internal\n  spec:\n    # Must match the ingress controller ingress class name.\n    ingressClassName: nginx-internal\n    rules:\n    - http:\n        paths:\n        - backend:\n            service:\n              name: my-nginx-kubernetes-api\n              port:\n                number: 60443\n          path: /api\n          pathType: Prefix\n    - http:\n        paths:\n        - backend:\n            service:\n              name: my-nginx-kubernetes-api\n              port:\n                number: 60443\n          path: /apis\n          pathType: Prefix\n    tls:\n    - hosts:\n      - A.B.C.D # IP of the machine hosting KIND\n      secretName: web-ssl-kubernetes-api\n  status:\n    loadBalancer:\n      ingress:\n      - hostname: localhost\n'})}),"\n",(0,s.jsx)(n.p,{children:"Please note that the certificates are generated for 100 years in order to not having rotation issue."}),"\n",(0,s.jsx)(n.h2,{id:"configure-interlink-helm-chart",children:"Configure InterLink Helm Chart"}),"\n",(0,s.jsx)(n.p,{children:"When deploying following deployment installation, at helm install, please add Kubernetes API configuration as follow:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# Contains the certificate of the service automatically created by certmanager, than contains, for this example, the IP address in SAN field.\nkubernetesApiCaCrt="$(kubectl get secret -n ingress-nginx-internal web-ssl-kubernetes-api -o jsonpath=\'{.data.ca\\.crt}\'|base64 -d)"\nhelm upgrade --install \\\n  --create-namespace \\\n  -n interlink \\\n  ...\n  --set "interlink.kubernetesApiAddr=A.B.C.D" \\\n  --set "interlink.kubernetesApiPort=60443" \\\n  --set "interlink.kubernetesApiCaCrt=${kubernetesApiCaCrt}"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"test-your-setup",children:"Test your setup"}),"\n",(0,s.jsx)(n.p,{children:"Please apply this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'cat <<EOF | kubectl apply -f -\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: helloworld\nspec:\n  template: # create pods using pod definition in this template\n    metadata:\n      labels:\n        app: helloworld\n      annotations:\n        slurm-job.vk.io/image-root: "docker://"\n    spec:\n      nodeSelector:\n        # The name of the virtual node HERE\n        kubernetes.io/hostname: interlink-slurm-node\n      affinity:\n        nodeAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 1\n            preference:\n              matchExpressions:\n              - key: "kubernetes.io/hostname"\n                operator: In\n                values:\n                - interlink-slurm-node\n      tolerations:\n      - key: virtual-node.interlink/no-schedule\n        operator: Exists\n      restartPolicy: Never\n      containers:\n      - name: helloworld\n        image: docker.io/bitnami/kubectl\n        command:\n          - "kubectl"\n          - "auth"\n          - "can-i"\n          - "--list"\n        tty: true\n        resources:\n          requests:\n            cpu: "50m"\n            memory: "100Mi"\n          limits:\n            cpu: "1500m"\n            memory: "2000Mi"\nEOF\nkubectl logs job/helloworld -f\n'})}),"\n",(0,s.jsx)(n.p,{children:"The expected output should be describe the RBAC related to the default serviceAccount, similar to this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Resources                                       Non-Resource URLs                      Resource Names   Verbs\nselfsubjectreviews.authentication.k8s.io        []                                     []               [create]\nselfsubjectaccessreviews.authorization.k8s.io   []                                     []               [create]\nselfsubjectrulesreviews.authorization.k8s.io    []                                     []               [create]\n                                                [/.well-known/openid-configuration/]   []               [get]\n                                                [/.well-known/openid-configuration]    []               [get]\n                                                [/api/*]                               []               [get]\n                                                [/api]                                 []               [get]\n                                                [/apis/*]                              []               [get]\n                                                [/apis]                                []               [get]\n                                                [/healthz]                             []               [get]\n                                                [/healthz]                             []               [get]\n                                                [/livez]                               []               [get]\n                                                [/livez]                               []               [get]\n                                                [/openapi/*]                           []               [get]\n                                                [/openapi]                             []               [get]\n                                                [/openid/v1/jwks/]                     []               [get]\n                                                [/openid/v1/jwks]                      []               [get]\n                                                [/readyz]                              []               [get]\n                                                [/readyz]                              []               [get]\n                                                [/version/]                            []               [get]\n                                                [/version/]                            []               [get]\n                                                [/version]                             []               [get]\n                                                [/version]                             []               [get]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var s=t(67294);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
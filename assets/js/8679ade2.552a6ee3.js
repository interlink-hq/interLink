"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[753],{550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(5893),r=t(1151);const o={sidebar_position:2},a="Develop an interLink plugin",s={id:"guides/develop-a-plugin",title:"Develop an interLink plugin",description:"Learn how to develop your interLink plugin to manage containers on your remote",source:"@site/docs/guides/02-develop-a-plugin.md",sourceDirName:"guides",slug:"/guides/develop-a-plugin",permalink:"/interLink/docs/guides/develop-a-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/interlink-hq/interLink/docs/guides/02-develop-a-plugin.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Deploy your plugin",permalink:"/interLink/docs/guides/deploy-interlink"},next:{title:"OpenAPI references",permalink:"/interLink/docs/guides/api-reference"}},l={},d=[{value:"Setup the python SDK",id:"setup-the-python-sdk",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Install the SDK",id:"install-the-sdk",level:3},{value:"Plugin provider",id:"plugin-provider",level:3},{value:"Implementing the provider methods",id:"implementing-the-provider-methods",level:2},{value:"The Create request",id:"the-create-request",level:3},{value:"The Delete request",id:"the-delete-request",level:3},{value:"The Status request",id:"the-status-request",level:3},{value:"The Logs request",id:"the-logs-request",level:3},{value:"A more advanced example",id:"a-more-advanced-example",level:3},{value:"Let&#39;s test is out",id:"lets-test-is-out",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"develop-an-interlink-plugin",children:"Develop an interLink plugin"}),"\n",(0,i.jsx)(n.p,{children:"Learn how to develop your interLink plugin to manage containers on your remote\nhost."}),"\n",(0,i.jsxs)(n.p,{children:["We are going to follow up\n",(0,i.jsx)(n.a,{href:"/interLink/docs/cookbook/edge",children:"the setup of an interlink node"})," with the last piece of\nthe puzzle:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"setup of a python SDK"}),"\n",(0,i.jsx)(n.li,{children:"demoing the fundamentals development of a plugin executing containers locally\nthrough the host docker daemon"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"The python SDK also produce an openAPI spec through FastAPI, therefore you can\nuse any language you want as long as the API spec is satisfied."})}),"\n",(0,i.jsx)(n.h2,{id:"setup-the-python-sdk",children:"Setup the python SDK"}),"\n",(0,i.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The tutorial is done on a Ubuntu VM, but there are not hard requirements\naround that"}),"\n",(0,i.jsxs)(n.li,{children:["Python>=3.10 and pip (",(0,i.jsx)(n.code,{children:"sudo apt install -y python3-pip"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Any python IDE will work and it is strongly suggested to use one :)"}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"docker engine running"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"install-the-sdk",children:"Install the SDK"}),"\n",(0,i.jsxs)(n.p,{children:["Look for the latest release on\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/releases",children:"the release page"})," and set\nthe environment variable ",(0,i.jsx)(n.code,{children:"VERSION"})," to it. Then you are ready to install the\npython SDK with:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#export VERSION=X.X.X\n#pip install "uvicorn[standard]" "git+https://github.com/interlink-hq/interlink-plugin-sdk@${VERSION}"\n\n# Or download the latest one with\npip install "uvicorn[standard]" "git+https://github.com/interlink-hq/interlink-plugin-sdk"\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"In the next section we are going to leverage the provider class of SDK to create\nour own plugin."}),"\n",(0,i.jsx)(n.h3,{id:"plugin-provider",children:"Plugin provider"}),"\n",(0,i.jsxs)(n.p,{children:["The\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/provider.py",children:"provider class"}),"\nis a FastAPI interface that aims to isolate the developers from all the API\nprovisioning boiler plate."]}),"\n",(0,i.jsxs)(n.p,{children:["In fact, we are going to need only the creation of a derived class implementing\nthe\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/provider.py#L14-L24",children:"interLink core methods"}),",\nand making use of in\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/spec.py",children:"request and response API specification"}),"\nto create our own container lifecycle management plugin."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Be aware that interLink is a development phase, therefore there is no long term\nguarantee for the API spec to be stable. Regardless, we are trying hard to keep\nthings as easy and stable as possible for a nice community experience."})}),"\n",(0,i.jsx)(n.h2,{id:"implementing-the-provider-methods",children:"Implementing the provider methods"}),"\n",(0,i.jsx)(n.p,{children:"Let's start installing the Docker python bindings, since in this example we want\nto:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["convert a\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/spec.py#L65",children:"Pod"}),"\ninto a ",(0,i.jsx)(n.code,{children:"docker run"})," execution"]}),"\n",(0,i.jsxs)(n.li,{children:["convert a\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/spec.py#L47",children:"Delete or State pod request"}),"\ninto ",(0,i.jsx)(n.code,{children:"docker rm"})," and ",(0,i.jsx)(n.code,{children:"docker ps"}),","]}),"\n",(0,i.jsxs)(n.li,{children:["convert a\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/spec.py#L103",children:"Log request"}),"\ninto a ",(0,i.jsx)(n.code,{children:"docker logs"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install docker\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can start creating our ",(0,i.jsx)(n.code,{children:"docker-plugin.py"})," script initializing the SDK\nprovider class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import interlink\n\nfrom fastapi import FastAPI, HTTPException\nfrom typing import List\nimport docker\nimport re\nimport os\nimport pprint\nfrom datetime import datetime\n\n# Initialize the docker client\ndockerCLI = docker.DockerClient()\n\n# Initialize FastAPI app\napp = FastAPI()\n\n# Define my custom interLink provider\nclass MyProvider(interlink.provider.Provider):\n    def __init__(\n        self,\n        DOCKER\n    ):\n        super().__init__(DOCKER)\n\n        # Recover container ID to pod UID map for the already running containers\n        self.CONTAINER_POD_MAP = {}\n        statuses = self.DOCKER.api.containers(all=True)\n        for status in statuses:\n            name = status["Names"][0]\n            if len(name.split("-")) > 1:\n                uid = "-".join(name.split("-")[-5:])\n                self.CONTAINER_POD_MAP.update({uid: [status["Id"]]})\n        print(self.CONTAINER_POD_MAP)\n\n\n# Please Take my provider and handle the interLink REST layer for me\nProviderDocker = MyProvider(dockerCLI)\n\n@app.post("/create")\nasync def create_pod(pods: List[interlink.Pod]) -> str:\n    return ProviderDocker.create_pod(pods)\n\n@app.post("/delete")\nasync def delete_pod(pod: interlink.PodRequest) -> str:\n    return ProviderDocker.delete_pod(pod)\n\n@app.get("/status")\nasync def status_pod(pods: List[interlink.PodRequest]) -> List[interlink.PodStatus]:\n    return ProviderDocker.get_status(pods)\n\n@app.get("/getLogs")\nasync def get_logs(req: interlink.LogRequest) -> bytes:\n    return ProviderDocker.get_logs(req)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This empty provider is already good to be started:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"uvicorn docker-plugin:app --reload --host 0.0.0.0 --port 4000 --log-level=debug\n"})}),"\n",(0,i.jsx)(n.p,{children:'At this stage, it will respond with "NOT IMPLEMENTED" errors for all the\nrequests. The initialization part will only take care of importing the docker\nclient and store or recover the status of the running containers.'}),"\n",(0,i.jsx)(n.p,{children:"It's time to put our hands on the actual container management workflow."}),"\n",(0,i.jsx)(n.h3,{id:"the-create-request",children:"The Create request"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"For simplicity, we are going to work just with the first container of the pod.\nFeel free to generalize this for a many-containers-pod."})}),"\n",(0,i.jsxs)(n.p,{children:["Let's implement the ",(0,i.jsx)(n.code,{children:"Create"})," method of the ",(0,i.jsx)(n.code,{children:"MyProvider"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    def Create(self, pod: interlink.Pod) -> None:\n        # Get the first container of the request\n        container = pod.pod.spec.containers[0]\n\n        # Build the docker container execution command\n        try:\n            cmds = " ".join(container.command)\n            args = " ".join(container.args)\n            dockerContainer = self.DOCKER.containers.run(\n                f"{container.image}:{container.tag}",\n                f"{cmds} {args}",\n                name=f"{container.name}-{pod.pod.metadata.uid}",\n                detach=True,\n            )\n            docker_run_id = dockerContainer.id\n        except Exception as ex:\n            raise HTTPException(status_code=500, detail=ex)\n\n        # Store the container ID to pod UID map information\n        self.CONTAINER_POD_MAP.update({pod.pod.metadata.uid: [docker_run_id]})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, here we are getting the basic information we needed to launch a\ncontainer with Docker, updating the status cache dictionary ",(0,i.jsx)(n.code,{children:"CONTAINER_POD_MAP"}),"\nafterwards."]}),"\n",(0,i.jsxs)(n.p,{children:["For fields available in ",(0,i.jsx)(n.code,{children:"interlink.Pod"})," request please refer to the\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/spec.py",children:"spec file"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"the-delete-request",children:"The Delete request"}),"\n",(0,i.jsx)(n.p,{children:"At this point there is nothing new anymore. The delete request should indeed\ntake care of the deletion of the container for the pod in the request:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    def Delete(self, pod: interlink.PodRequest) -> None:\n        try:\n            print(f"docker rm -f {self.CONTAINER_POD_MAP[pod.metadata.uid][0]}")\n            container = self.DOCKER.containers.get(self.CONTAINER_POD_MAP[pod.metadata.uid][0])\n            container.remove(force=True)\n            self.CONTAINER_POD_MAP.pop(pod.metadata.uid)\n        except:\n            raise HTTPException(status_code=404, detail="No containers found for UUID")\n        return\n'})}),"\n",(0,i.jsx)(n.h3,{id:"the-status-request",children:"The Status request"}),"\n",(0,i.jsxs)(n.p,{children:["The status request takes care of the returing a proper\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/interlink/spec.py#L89C1-L93C38",children:"PodStatus"}),"\nresponse for the pod in the request:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    def Status(self,  pod: interlink.PodRequest) -> interlink.PodStatus:\n        # Collect the container status\n        try:\n            container = self.DOCKER.containers.get(self.CONTAINER_POD_MAP[pod.metadata.uid][0])\n            status = container.status\n        except:\n            raise HTTPException(status_code=404, detail="No containers found for UUID")\n\n        match status:\n            # If running: get the start time and return a running pod state\n            case "running":\n                try:\n                    statuses = self.DOCKER.api.containers(filters={"status":"running", "id": container.id})\n                    # Convert data to the correct format\n                    startedAt = statuses[0]["Created"]\n                    startedAt = datetime.utcfromtimestamp(startedAt).strftime(\'%Y-%m-%dT%H:%M:%SZ\')\n                except Exception as ex:\n                    raise HTTPException(status_code=500, detail=ex)\n\n                return interlink.PodStatus(\n                        name=pod.metadata.name,\n                        UID=pod.metadata.uid,\n                        namespace=pod.metadata.namespace,\n                        containers=[\n                            interlink.ContainerStatus(\n                                name=pod.spec.containers[0].name,\n                                state=interlink.ContainerStates(\n                                    running=interlink.StateRunning(startedAt=startedAt),\n                                    waiting=None,\n                                    terminated=None,\n                                )\n                            )\n                        ]\n                    )\n            # If exited, collect the exitcode and the reason, then file a valid PodStatus with those info\n            case "exited":\n                try:\n                    statuses = self.DOCKER.api.containers(filters={"status":"exited", "id": container.id})\n                    reason = statuses[0]["Status"]\n                    pattern = re.compile(r\'Exited \\((.*?)\\)\')\n\n                    exitCode = -1\n                    for match in re.findall(pattern, reason):\n                        exitCode = int(match)\n                except Exception as ex:\n                    raise HTTPException(status_code=500, detail=ex)\n\n                return interlink.PodStatus(\n                        name=pod.metadata.name,\n                        UID=pod.metadata.uid,\n                        namespace=pod.metadata.namespace,\n                        containers=[\n                            interlink.ContainerStatus(\n                                name=pod.spec.containers[0].name,\n                                state=interlink.ContainerStates(\n                                    running=None,\n                                    waiting=None,\n                                    terminated=interlink.StateTerminated(\n                                        reason=reason,\n                                        exitCode=exitCode\n                                    ),\n                                )\n                            )\n                        ]\n                    )\n\n            # If none of the above are true, the container ended with 0 exit code. Set the status to completed\n            case _:\n                return interlink.PodStatus(\n                        name=pod.metadata.name,\n                        UID=pod.metadata.uid,\n                        namespace=pod.metadata.namespace,\n                        containers=[\n                            interlink.ContainerStatus(\n                                name=pod.spec.containers[0].name,\n                                state=interlink.ContainerStates(\n                                    running=None,\n                                    waiting=None,\n                                    terminated=interlink.StateTerminated(\n                                        reason="Completed",\n                                        exitCode=0\n                                    ),\n                                )\n                            )\n                        ]\n                    )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"the-logs-request",children:"The Logs request"}),"\n",(0,i.jsx)(n.p,{children:"When receiving the LogRequest, there are many log options to satisfy, in any\ncase the response is a byte array. Here the basic example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    def Logs(self, req: interlink.LogRequest) -> bytes:\n        # We are not managing more complicated multi container pod\n        #       THIS IS ONLY FOR DEMONSTRATION\n        try:\n            # Get the container in the request and collect the logs\n            container = self.DOCKER.containers.get(self.CONTAINER_POD_MAP[req.PodUID][0])\n            #log = container.logs(timestamps=req.Opts.Timestamps, tail=req.Opts.Tail)\n            log = container.logs()\n            print(log)\n        except:\n            raise HTTPException(status_code=404, detail="No containers found for UUID")\n\n        return log\n'})}),"\n",(0,i.jsx)(n.h3,{id:"a-more-advanced-example",children:"A more advanced example"}),"\n",(0,i.jsxs)(n.p,{children:["If you are interested in a more advanced example, please refer the\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/blob/main/example/provider_demo.py",children:"full example"}),"\nfor supporting configMap and secret volumes."]}),"\n",(0,i.jsx)(n.h2,{id:"lets-test-is-out",children:"Let's test is out"}),"\n",(0,i.jsxs)(n.p,{children:["After the completion of\n",(0,i.jsx)(n.a,{href:"/interLink/docs/cookbook/edge",children:"the core components deployment"}),", you can now kickstart\nthe newly created plugin and make it spawn on the port 4000 so it can be\ncontacted by the interLink API server."]}),"\n",(0,i.jsx)(n.p,{children:"You can submit a pod like the following to test the whole workflow:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: interlink-quickstart\n  namespace: default\n  # # Uncomment this if you are using SLURM\n  # annotations:\n  #  slurm-job.vk.io/image-root: "docker://"\nspec:\n  nodeSelector:\n    # The name of the virtual node HERE\n    kubernetes.io/hostname: civo-node\n  automountServiceAccountToken: false\n  containers:\n    - args:\n        - sleep 100 && echo "FINISHED!"\n      command:\n        - /bin/sh\n        - -c\n      image: busybox\n      imagePullPolicy: Always\n      name: my-container\n      resources:\n        limits:\n          cpu: "1"\n          memory: 1Gi\n        requests:\n          cpu: "1"\n          memory: 1Gi\n  tolerations:\n    - key: virtual-node.interlink/no-schedule\n      operator: Exists\n    - effect: NoExecute\n      key: node.kubernetes.io/not-ready\n      operator: Exists\n      tolerationSeconds: 300\n    - effect: NoExecute\n      key: node.kubernetes.io/unreachable\n      operator: Exists\n      tolerationSeconds: 300\n'})}),"\n",(0,i.jsx)(n.p,{children:"Finally you should check that all the supported commands (get,logs,delete...)\nworks on this pod."})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var i=t(7294);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
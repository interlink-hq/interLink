"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8509],{38221:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=t(85893),r=t(11151),s=(t(74866),t(85162),t(19965)),l=t(44996);const o={sidebar_position:3},a="Tunneled deployment",c={id:"cookbook/tunneled",title:"Tunneled deployment",description:"Deploy interLink components in both systems, linked through a tunnelled",source:"@site/docs/cookbook/3-tunneled.mdx",sourceDirName:"cookbook",slug:"/cookbook/tunneled",permalink:"/interLink/docs/next/cookbook/tunneled",draft:!1,unlisted:!1,editUrl:"https://github.com/interlink-hq/interLink/docs/cookbook/3-tunneled.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"In-cluster deployment",permalink:"/interLink/docs/next/cookbook/incluster"},next:{title:"Admin guides",permalink:"/interLink/docs/next/category/admin-guides"}},u={},d=[{value:"SSH Tunnel Setup for interLink",id:"ssh-tunnel-setup-for-interlink",level:2},{value:"Overview",id:"overview",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"SSH Key Setup",id:"ssh-key-setup",level:4},{value:"Optional: Host Key Verification",id:"optional-host-key-verification",level:4},{value:"Configuration",id:"configuration",level:3},{value:"Step 1: Configure interLink API Server",id:"step-1-configure-interlink-api-server",level:4},{value:"Step 2: Configure Virtual Kubelet",id:"step-2-configure-virtual-kubelet",level:4},{value:"Step 3: Start SSH Tunnel",id:"step-3-start-ssh-tunnel",level:4},{value:"Basic Usage",id:"basic-usage",level:5},{value:"With Host Key Verification",id:"with-host-key-verification",level:5},{value:"Command Line Options",id:"command-line-options",level:5},{value:"Complete Deployment Example",id:"complete-deployment-example",level:3},{value:"Step 1: Prepare Remote Environment",id:"step-1-prepare-remote-environment",level:4},{value:"Step 2: Start Local Components",id:"step-2-start-local-components",level:4},{value:"Step 3: Verify Connection",id:"step-3-verify-connection",level:4},{value:"Systemd Service Configuration",id:"systemd-service-configuration",level:2},{value:"Create System User",id:"create-system-user",level:3},{value:"Copy Binaries and Configuration",id:"copy-binaries-and-configuration",level:3},{value:"SSH Tunnel Service",id:"ssh-tunnel-service",level:3},{value:"interLink API Server Service",id:"interlink-api-server-service",level:3},{value:"Virtual Kubelet Service",id:"virtual-kubelet-service",level:3},{value:"Remote Plugin Service (for Remote Server)",id:"remote-plugin-service-for-remote-server",level:3},{value:"Kubernetes Configuration",id:"kubernetes-configuration",level:3},{value:"Log Rotation Configuration",id:"log-rotation-configuration",level:3},{value:"Service Management Commands",id:"service-management-commands",level:3},{value:"Service Operations",id:"service-operations",level:3},{value:"Monitoring and Health Checks",id:"monitoring-and-health-checks",level:3},{value:"Troubleshooting Tunneled Deployment",id:"troubleshooting-tunneled-deployment",level:3},{value:"SSH Tunnel Issues",id:"ssh-tunnel-issues",level:4},{value:"Virtual Kubelet Issues",id:"virtual-kubelet-issues",level:4},{value:"Remote Plugin Issues",id:"remote-plugin-issues",level:4},{value:"Security Considerations for Tunneled Deployment",id:"security-considerations-for-tunneled-deployment",level:3},{value:"SSH Security",id:"ssh-security",level:4},{value:"Network Security",id:"network-security",level:4},{value:"File Permissions",id:"file-permissions",level:4}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"tunneled-deployment",children:"Tunneled deployment"}),"\n",(0,i.jsx)(n.p,{children:"Deploy interLink components in both systems, linked through a tunnelled\ncommunication."}),"\n",(0,i.jsx)(s.Z,{alt:"Docusaurus themed image",sources:{light:(0,l.Z)("/img/scenario-3_light.svg"),dark:(0,l.Z)("/img/scenario-3_dark.svg")}}),"\n",(0,i.jsx)(n.h2,{id:"ssh-tunnel-setup-for-interlink",children:"SSH Tunnel Setup for interLink"}),"\n",(0,i.jsxs)(n.p,{children:["This guide explains how to configure SSH tunneling between Virtual Kubelet and interLink API server using the built-in ",(0,i.jsx)(n.code,{children:"ssh-tunnel"})," command. SSH tunneling enables secure communication in scenarios where direct network connectivity is not available or desired."]}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The SSH tunnel functionality allows you to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Connect Virtual Kubelet to a remote interLink API server through an SSH tunnel"}),"\n",(0,i.jsx)(n.li,{children:"Secure communication over untrusted networks"}),"\n",(0,i.jsx)(n.li,{children:"Bypass network restrictions and firewalls"}),"\n",(0,i.jsxs)(n.li,{children:["Enable the ",(0,i.jsx)(n.strong,{children:"tunneled deployment pattern"})," where the API server runs locally and the plugin runs remotely"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.p,{children:"In a tunneled deployment:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Virtual Kubelet"})," runs in your local Kubernetes cluster"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"interLink API server"})," runs locally (same network as Virtual Kubelet)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSH tunnel"})," forwards traffic from local Unix socket to remote TCP port"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plugin"})," runs on the remote compute resource (HPC cluster, cloud, etc.)"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Virtual Kubelet] -> [interLink API] -> [Unix Socket] -> [SSH Tunnel] -> [Remote Plugin]\n     (local)            (local)          (local)        (ssh bridge)      (remote)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before setting up SSH tunneling, ensure you have:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSH access"})," to the remote system where the plugin runs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSH key pair"})," for authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network connectivity"})," from local system to remote SSH server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"interLink binary"})," built with ssh-tunnel command (",(0,i.jsx)(n.code,{children:"make ssh-tunnel"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"ssh-key-setup",children:"SSH Key Setup"}),"\n",(0,i.jsx)(n.p,{children:"Generate an SSH key pair if you don't have one:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate SSH key pair\nssh-keygen -t rsa -b 4096 -f ~/.ssh/interlink_rsa\n\n# Copy public key to remote server\nssh-copy-id -i ~/.ssh/interlink_rsa.pub user@remote-server\n\n# Test SSH connection\nssh -i ~/.ssh/interlink_rsa user@remote-server\n"})}),"\n",(0,i.jsx)(n.h4,{id:"optional-host-key-verification",children:"Optional: Host Key Verification"}),"\n",(0,i.jsx)(n.p,{children:"For enhanced security, extract the remote server's host key:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Extract host public key from remote server\nssh-keyscan -t rsa remote-server > ~/.ssh/interlink_host_key\n\n# Or get it from known_hosts\nssh-keygen -F remote-server -f ~/.ssh/known_hosts | grep -o 'ssh-rsa.*' > ~/.ssh/interlink_host_key\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h4,{id:"step-1-configure-interlink-api-server",children:"Step 1: Configure interLink API Server"}),"\n",(0,i.jsx)(n.p,{children:"Configure the interLink API server to listen on a Unix socket instead of a TCP port:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="InterLinkConfig.yaml"',children:'# Use Unix socket for local communication\nInterlinkAddress: "unix:///tmp/interlink.sock"\nInterlinkPort: ""  # Not used for Unix sockets\n\n# Remote plugin configuration\nSidecarURL: "http://remote-plugin"\nSidecarPort: "4000"\n\nVerboseLogging: true\nErrorsOnlyLogging: false\nDataRootFolder: "/tmp/interlink"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"step-2-configure-virtual-kubelet",children:"Step 2: Configure Virtual Kubelet"}),"\n",(0,i.jsx)(n.p,{children:"Configure Virtual Kubelet to connect to the Unix socket:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="VirtualKubeletConfig.yaml"',children:'# Connect to Unix socket\nInterlinkURL: "unix:///tmp/interlink.sock"\nInterlinkPort: ""  # Not used for Unix sockets\n\nVerboseLogging: true\nErrorsOnlyLogging: false\n\n# Node configuration\nNodeName: "my-interlink-node"\nNodeLabels:\n  "interlink.cern.ch/provider": "remote-hpc"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"step-3-start-ssh-tunnel",children:"Step 3: Start SSH Tunnel"}),"\n",(0,i.jsxs)(n.p,{children:["Use the built-in ",(0,i.jsx)(n.code,{children:"ssh-tunnel"})," command to establish the tunnel:"]}),"\n",(0,i.jsx)(n.h5,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Start SSH tunnel\n./bin/ssh-tunnel \\\n  -addr "remote-server:22" \\\n  -user "username" \\\n  -keyfile "~/.ssh/interlink_rsa" \\\n  -lsock "/tmp/interlink.sock" \\\n  -rport "4000"\n'})}),"\n",(0,i.jsx)(n.h5,{id:"with-host-key-verification",children:"With Host Key Verification"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Start SSH tunnel with host key verification\n./bin/ssh-tunnel \\\n  -addr "remote-server:22" \\\n  -user "username" \\\n  -keyfile "~/.ssh/interlink_rsa" \\\n  -lsock "/tmp/interlink.sock" \\\n  -rport "4000" \\\n  -hostkeyfile "~/.ssh/interlink_host_key"\n'})}),"\n",(0,i.jsx)(n.h5,{id:"command-line-options",children:"Command Line Options"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Required"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-addr"})}),(0,i.jsxs)(n.td,{children:["SSH server address as ",(0,i.jsx)(n.code,{children:"hostname:port"})]}),(0,i.jsx)(n.td,{children:"Yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-user"})}),(0,i.jsx)(n.td,{children:"Username for SSH authentication"}),(0,i.jsx)(n.td,{children:"Yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-keyfile"})}),(0,i.jsx)(n.td,{children:"Path to private key file"}),(0,i.jsx)(n.td,{children:"Yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-lsock"})}),(0,i.jsx)(n.td,{children:"Path to local Unix socket"}),(0,i.jsx)(n.td,{children:"Yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-rport"})}),(0,i.jsx)(n.td,{children:"Remote port where plugin listens"}),(0,i.jsx)(n.td,{children:"Yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-hostkeyfile"})}),(0,i.jsx)(n.td,{children:"Path to host public key for verification"}),(0,i.jsx)(n.td,{children:"No"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"complete-deployment-example",children:"Complete Deployment Example"}),"\n",(0,i.jsx)(n.h4,{id:"step-1-prepare-remote-environment",children:"Step 1: Prepare Remote Environment"}),"\n",(0,i.jsx)(n.p,{children:"On the remote server, start your interLink plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Example: Start SLURM plugin on remote HPC system\ncd /path/to/plugin\npython3 slurm_plugin.py --port 4000\n"})}),"\n",(0,i.jsx)(n.h4,{id:"step-2-start-local-components",children:"Step 2: Start Local Components"}),"\n",(0,i.jsx)(n.p,{children:"Start components in this order:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 1. Start SSH tunnel (runs in foreground)\n./bin/ssh-tunnel \\\n  -addr "hpc-cluster.example.com:22" \\\n  -user "hpc-user" \\\n  -keyfile "~/.ssh/interlink_rsa" \\\n  -lsock "/tmp/interlink.sock" \\\n  -rport "4000" \\\n  -hostkeyfile "~/.ssh/interlink_host_key"\n'})}),"\n",(0,i.jsx)(n.p,{children:"In separate terminals:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 2. Start interLink API server\nexport INTERLINKCONFIGPATH=/path/to/InterLinkConfig.yaml\n./bin/interlink\n\n# 3. Start Virtual Kubelet\nexport KUBECONFIG=~/.kube/config\n./bin/virtual-kubelet \\\n  --provider interlink \\\n  --nodename interlink-node \\\n  --config /path/to/VirtualKubeletConfig.yaml\n"})}),"\n",(0,i.jsx)(n.h4,{id:"step-3-verify-connection",children:"Step 3: Verify Connection"}),"\n",(0,i.jsx)(n.p,{children:"Test the complete setup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check if node appears in Kubernetes\nkubectl get nodes\n\n# Deploy a test pod\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-tunnel\nspec:\n  nodeSelector:\n    kubernetes.io/hostname: interlink-node\n  containers:\n  - name: test\n    image: busybox\n    command: ["sleep", "3600"]\nEOF\n\n# Check pod status\nkubectl get pod test-tunnel -o wide\n'})}),"\n",(0,i.jsx)(n.h2,{id:"systemd-service-configuration",children:"Systemd Service Configuration"}),"\n",(0,i.jsx)(n.p,{children:"For production deployments, it's recommended to manage all tunneled components using systemd services. This provides automatic startup, restart on failure, and proper logging."}),"\n",(0,i.jsx)(n.h3,{id:"create-system-user",children:"Create System User"}),"\n",(0,i.jsx)(n.p,{children:"First, create a dedicated system user for running interLink services:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo useradd --system --create-home --home-dir /opt/interlink --shell /bin/bash interlink\nsudo mkdir -p /opt/interlink/{bin,config,logs,.ssh}\nsudo chown -R interlink:interlink /opt/interlink\n"})}),"\n",(0,i.jsx)(n.h3,{id:"copy-binaries-and-configuration",children:"Copy Binaries and Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Move your interLink components to the system directories:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Copy binaries\nsudo cp ./bin/ssh-tunnel /opt/interlink/bin/\nsudo cp ./bin/interlink /opt/interlink/bin/\nsudo cp ./bin/virtual-kubelet /opt/interlink/bin/\nsudo chmod +x /opt/interlink/bin/*\n\n# Copy configuration files\nsudo cp InterLinkConfig.yaml /opt/interlink/config/\nsudo cp VirtualKubeletConfig.yaml /opt/interlink/config/\n\n# Copy SSH keys\nsudo cp ~/.ssh/interlink_rsa /opt/interlink/.ssh/id_rsa\nsudo cp ~/.ssh/interlink_rsa.pub /opt/interlink/.ssh/id_rsa.pub\nsudo cp ~/.ssh/interlink_host_key /opt/interlink/.ssh/host_key\n\n# Set ownership and permissions\nsudo chown -R interlink:interlink /opt/interlink\nsudo chmod 600 /opt/interlink/.ssh/id_rsa\nsudo chmod 644 /opt/interlink/.ssh/id_rsa.pub\nsudo chmod 644 /opt/interlink/.ssh/host_key\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ssh-tunnel-service",children:"SSH Tunnel Service"}),"\n",(0,i.jsx)(n.p,{children:"Create the SSH tunnel systemd service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-tunnel.service"',children:'[Unit]\nDescription=interLink SSH Tunnel\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nExecStart=/opt/interlink/bin/ssh-tunnel \\\n  -addr "remote-server:22" \\\n  -user "interlink" \\\n  -keyfile "/opt/interlink/.ssh/id_rsa" \\\n  -lsock "/tmp/interlink.sock" \\\n  -rport "4000" \\\n  -hostkeyfile "/opt/interlink/.ssh/host_key"\n\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/ssh-tunnel.log\nStandardError=append:/opt/interlink/logs/ssh-tunnel.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n'})}),"\n",(0,i.jsx)(n.h3,{id:"interlink-api-server-service",children:"interLink API Server Service"}),"\n",(0,i.jsx)(n.p,{children:"Create the interLink API server systemd service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-api.service"',children:"[Unit]\nDescription=interLink API Server (Tunneled)\nAfter=network.target interlink-tunnel.service\nWants=network.target\nRequires=interlink-tunnel.service\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nEnvironment=INTERLINKCONFIGPATH=/opt/interlink/config/InterLinkConfig.yaml\nExecStart=/opt/interlink/bin/interlink\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/interlink-api.log\nStandardError=append:/opt/interlink/logs/interlink-api.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,i.jsx)(n.h3,{id:"virtual-kubelet-service",children:"Virtual Kubelet Service"}),"\n",(0,i.jsx)(n.p,{children:"Create the Virtual Kubelet systemd service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-virtual-kubelet.service"',children:"[Unit]\nDescription=interLink Virtual Kubelet (Tunneled)\nAfter=network.target interlink-api.service\nWants=network.target\nRequires=interlink-api.service\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nEnvironment=KUBECONFIG=/opt/interlink/.kube/config\nExecStart=/opt/interlink/bin/virtual-kubelet \\\n  --provider interlink \\\n  --nodename interlink-node \\\n  --config /opt/interlink/config/VirtualKubeletConfig.yaml\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/virtual-kubelet.log\nStandardError=append:/opt/interlink/logs/virtual-kubelet.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,i.jsx)(n.h3,{id:"remote-plugin-service-for-remote-server",children:"Remote Plugin Service (for Remote Server)"}),"\n",(0,i.jsx)(n.p,{children:"For the remote server where the plugin runs, create a systemd service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-remote-plugin.service"',children:"[Unit]\nDescription=interLink Remote Plugin\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink-plugin\nEnvironment=PLUGIN_CONFIG=/opt/interlink-plugin/config/plugin-config.yaml\nExecStart=/opt/interlink-plugin/bin/plugin\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/var/log/interlink/plugin.log\nStandardError=append:/var/log/interlink/plugin.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/var/log/interlink /opt/interlink-plugin/jobs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,i.jsx)(n.h3,{id:"kubernetes-configuration",children:"Kubernetes Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Set up the kubeconfig for the interLink user:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Copy kubeconfig for interLink user\nsudo mkdir -p /opt/interlink/.kube\nsudo cp ~/.kube/config /opt/interlink/.kube/config\nsudo chown -R interlink:interlink /opt/interlink/.kube\nsudo chmod 600 /opt/interlink/.kube/config\n"})}),"\n",(0,i.jsx)(n.h3,{id:"log-rotation-configuration",children:"Log Rotation Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Create log rotation configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/logrotate.d/interlink-tunneled"',children:"/opt/interlink/logs/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    postrotate\n        systemctl reload interlink-tunnel interlink-api interlink-virtual-kubelet 2>/dev/null || true\n    endscript\n}\n\n/var/log/interlink/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    postrotate\n        systemctl reload interlink-remote-plugin 2>/dev/null || true\n    endscript\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"service-management-commands",children:"Service Management Commands"}),"\n",(0,i.jsx)(n.p,{children:"Enable and start all services in the correct order:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Local services (where Virtual Kubelet runs)\nsudo systemctl daemon-reload\nsudo systemctl enable interlink-tunnel interlink-api interlink-virtual-kubelet\n\n# Start services in dependency order\nsudo systemctl start interlink-tunnel\nsudo systemctl start interlink-api\nsudo systemctl start interlink-virtual-kubelet\n\n# Remote services (on the plugin server)\nsudo systemctl daemon-reload\nsudo systemctl enable interlink-remote-plugin\nsudo systemctl start interlink-remote-plugin\n\n# Check service status\nsudo systemctl status interlink-tunnel\nsudo systemctl status interlink-api\nsudo systemctl status interlink-virtual-kubelet\n"})}),"\n",(0,i.jsx)(n.h3,{id:"service-operations",children:"Service Operations"}),"\n",(0,i.jsx)(n.p,{children:"Common systemd operations for managing tunneled interLink services:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# View service logs\nsudo journalctl -u interlink-tunnel -f\nsudo journalctl -u interlink-api -f\nsudo journalctl -u interlink-virtual-kubelet -f\n\n# Restart tunnel (will cascade to dependent services)\nsudo systemctl restart interlink-tunnel\n\n# Stop all local interLink services\nsudo systemctl stop interlink-virtual-kubelet interlink-api interlink-tunnel\n\n# Start all local interLink services\nsudo systemctl start interlink-tunnel interlink-api interlink-virtual-kubelet\n\n# Check service dependencies\nsudo systemctl list-dependencies interlink-virtual-kubelet\n"})}),"\n",(0,i.jsx)(n.h3,{id:"monitoring-and-health-checks",children:"Monitoring and Health Checks"}),"\n",(0,i.jsx)(n.p,{children:"Create a comprehensive health check script for tunneled deployment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="/opt/interlink/bin/tunneled-health-check.sh"',children:'#!/bin/bash\n\n# Health check script for tunneled interLink deployment\nLOG_FILE="/opt/interlink/logs/health-check.log"\nSOCKET_PATH="/tmp/interlink.sock"\nREMOTE_HOST="remote-server"\nREMOTE_PORT="4000"\n\necho "$(date): Starting tunneled deployment health check" >> "$LOG_FILE"\n\n# Check SSH tunnel connectivity\nif ! pgrep -f "ssh-tunnel" > /dev/null; then\n    echo "$(date): ERROR - SSH tunnel process not running" >> "$LOG_FILE"\n    exit 1\nfi\n\n# Check if Unix socket exists and is responding\nif [ -S "$SOCKET_PATH" ]; then\n    response=$(curl -s --unix-socket "$SOCKET_PATH" http://unix/pinglink 2>/dev/null)\n    if [ $? -eq 0 ]; then\n        echo "$(date): Local API health check passed - $response" >> "$LOG_FILE"\n    else\n        echo "$(date): ERROR - Local API not responding via socket" >> "$LOG_FILE"\n        exit 1\n    fi\nelse\n    echo "$(date): ERROR - Unix socket not found at $SOCKET_PATH" >> "$LOG_FILE"\n    exit 1\nfi\n\n# Check Virtual Kubelet node status\nif kubectl get node interlink-node --no-headers 2>/dev/null | grep -q Ready; then\n    echo "$(date): Virtual Kubelet node is Ready" >> "$LOG_FILE"\nelse\n    echo "$(date): WARNING - Virtual Kubelet node not Ready" >> "$LOG_FILE"\nfi\n\n# Test remote connectivity through tunnel\nif nc -z -w5 127.0.0.1 4000 2>/dev/null; then\n    echo "$(date): Remote plugin connectivity through tunnel - OK" >> "$LOG_FILE"\nelse\n    echo "$(date): WARNING - Cannot reach remote plugin through tunnel" >> "$LOG_FILE"\nfi\n\necho "$(date): Tunneled deployment health check completed" >> "$LOG_FILE"\nexit 0\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Make executable\nsudo chmod +x /opt/interlink/bin/tunneled-health-check.sh\nsudo chown interlink:interlink /opt/interlink/bin/tunneled-health-check.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create systemd timer for health checks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-tunneled-health-check.service"',children:"[Unit]\nDescription=interLink Tunneled Health Check\nAfter=interlink-virtual-kubelet.service\nRequires=interlink-virtual-kubelet.service\n\n[Service]\nType=oneshot\nUser=interlink\nGroup=interlink\nExecStart=/opt/interlink/bin/tunneled-health-check.sh\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-tunneled-health-check.timer"',children:"[Unit]\nDescription=Run interLink Tunneled Health Check every 5 minutes\nRequires=interlink-tunneled-health-check.service\n\n[Timer]\nOnCalendar=*:0/5\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n"})}),"\n",(0,i.jsx)(n.p,{children:"Enable the health check timer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\nsudo systemctl enable interlink-tunneled-health-check.timer\nsudo systemctl start interlink-tunneled-health-check.timer\n"})}),"\n",(0,i.jsx)(n.h3,{id:"troubleshooting-tunneled-deployment",children:"Troubleshooting Tunneled Deployment"}),"\n",(0,i.jsx)(n.h4,{id:"ssh-tunnel-issues",children:"SSH Tunnel Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check SSH tunnel process\nps aux | grep ssh-tunnel\n\n# Test SSH connection manually\nsudo -u interlink ssh -i /opt/interlink/.ssh/id_rsa interlink@remote-server\n\n# Check SSH tunnel logs\nsudo journalctl -u interlink-tunnel --since "1 hour ago"\n\n# Test local socket\necho "test" | nc -U /tmp/interlink.sock\n'})}),"\n",(0,i.jsx)(n.h4,{id:"virtual-kubelet-issues",children:"Virtual Kubelet Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check Virtual Kubelet logs\nsudo journalctl -u interlink-virtual-kubelet -f\n\n# Verify kubeconfig access\nsudo -u interlink kubectl get nodes\n\n# Check node status\nkubectl describe node interlink-node\n"})}),"\n",(0,i.jsx)(n.h4,{id:"remote-plugin-issues",children:"Remote Plugin Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# On remote server, check plugin status\nsudo systemctl status interlink-remote-plugin\n\n# Check if plugin port is listening\nnetstat -tlnp | grep :4000\n\n# Test plugin connectivity from remote server\ncurl -X GET http://localhost:4000/status\n"})}),"\n",(0,i.jsx)(n.h3,{id:"security-considerations-for-tunneled-deployment",children:"Security Considerations for Tunneled Deployment"}),"\n",(0,i.jsx)(n.h4,{id:"ssh-security",children:"SSH Security"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dedicated SSH keys"}),": Use separate keys for interLink tunneling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key restrictions"}),": Add restrictions in ",(0,i.jsx)(n.code,{children:"authorized_keys"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# On remote server in ~/.ssh/authorized_keys\ncommand="/usr/bin/false",no-pty,no-X11-forwarding,no-agent-forwarding,no-port-forwarding ssh-rsa AAAAB3... interlink-tunnel-key\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSH configuration"}),": Secure SSH server configuration:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/ssh/sshd_config.d/interlink.conf"',children:"# Dedicated configuration for interLink tunnel user\nMatch User interlink\n    AllowTcpForwarding yes\n    AllowStreamLocalForwarding yes\n    PermitTunnel no\n    X11Forwarding no\n    AllowAgentForwarding no\n    PermitTTY no\n    ForceCommand /bin/false\n"})}),"\n",(0,i.jsx)(n.h4,{id:"network-security",children:"Network Security"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Firewall rules for local server\nsudo ufw allow in on lo\nsudo ufw allow out 22/tcp comment "SSH for tunnel"\n\n# Firewall rules for remote server  \nsudo ufw allow from <local-server-ip> to any port 22 comment "SSH tunnel"\nsudo ufw allow 4000/tcp comment "Plugin API"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"file-permissions",children:"File Permissions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Secure SSH directory\nsudo chmod 700 /opt/interlink/.ssh\nsudo chmod 600 /opt/interlink/.ssh/id_rsa\nsudo chmod 644 /opt/interlink/.ssh/id_rsa.pub /opt/interlink/.ssh/host_key\n\n# Secure configuration files\nsudo chmod 640 /opt/interlink/config/*\nsudo chown root:interlink /opt/interlink/config/*\n"})}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive tunneled deployment setup provides a robust, secure, and manageable solution for connecting Kubernetes clusters to remote compute resources through SSH tunneling."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"For additional case studies and advanced configurations, reach out to the interLink community through the Slack channel."})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>l});t(67294);var i=t(90512);const r={tabItem:"tabItem_Ymn6"};var s=t(85893);function l(e){let{children:n,hidden:t,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,l),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>j});var i=t(67294),r=t(90512),s=t(12466),l=t(16550),o=t(20469),a=t(91980),c=t(67392),u=t(50012);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,a._X)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function k(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[l,a]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[c,d]=m({queryString:t,groupId:r}),[k,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,u.Nk)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),v=(()=>{const e=c??k;return p({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{v&&a(v)}),[v]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=t(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(85893);function y(e){let{className:n,block:t,selectedValue:i,selectValue:l,tabValues:o}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),u=e=>{const n=e.currentTarget,t=a.indexOf(n),r=o[t].value;r!==i&&(c(n),l(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>a.push(e),onKeyDown:d,onClick:u,...s,className:(0,r.Z)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function b(e){const n=k(e);return(0,x.jsxs)("div",{className:(0,r.Z)("tabs-container",v.tabList),children:[(0,x.jsx)(y,{...e,...n}),(0,x.jsx)(f,{...e,...n})]})}function j(e){const n=(0,g.Z)();return(0,x.jsx)(b,{...e,children:d(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>l});var i=t(67294);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6769],{92376:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var t=i(85893),r=i(11151);const s={sidebar_position:8},o="Systemd Deployment Guide",l={id:"guides/systemd-deployment",title:"Systemd Deployment Guide",description:"This guide explains how to deploy InterLink components using systemd services for production environments. Systemd provides automatic startup, restart on failure, proper logging, and robust service management.",source:"@site/versioned_docs/version-0.5.x/guides/08-systemd-deployment.mdx",sourceDirName:"guides",slug:"/guides/systemd-deployment",permalink:"/interLink/docs/guides/systemd-deployment",draft:!1,unlisted:!1,editUrl:"https://github.com/interlink-hq/interLink/versioned_docs/version-0.5.x/guides/08-systemd-deployment.mdx",tags:[],version:"0.5.x",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"mTLS Deployment Guide",permalink:"/interLink/docs/guides/mtls-deployment"},next:{title:"Developers guide",permalink:"/interLink/docs/Developers"}},c={},a=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"System Setup",id:"system-setup",level:2},{value:"Create System User",id:"create-system-user",level:3},{value:"Copy Binaries and Configuration",id:"copy-binaries-and-configuration",level:3},{value:"Service Configuration",id:"service-configuration",level:2},{value:"OAuth2 Proxy Service",id:"oauth2-proxy-service",level:3},{value:"InterLink API Server Service",id:"interlink-api-server-service",level:3},{value:"Plugin Service",id:"plugin-service",level:3},{value:"SLURM Plugin Service",id:"slurm-plugin-service",level:3},{value:"Log Management",id:"log-management",level:2},{value:"Log Rotation Configuration",id:"log-rotation-configuration",level:3},{value:"Service Management",id:"service-management",level:2},{value:"Enable and Start Services",id:"enable-and-start-services",level:3},{value:"Common Operations",id:"common-operations",level:3},{value:"Monitoring and Health Checks",id:"monitoring-and-health-checks",level:2},{value:"Create Health Check Script",id:"create-health-check-script",level:3},{value:"Systemd Timer for Health Checks",id:"systemd-timer-for-health-checks",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Service Debugging",id:"service-debugging",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Additional Security",id:"additional-security",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Resource Limits",id:"resource-limits",level:3},{value:"Custom Environment",id:"custom-environment",level:3},{value:"Notifications",id:"notifications",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"systemd-deployment-guide",children:"Systemd Deployment Guide"}),"\n",(0,t.jsx)(n.p,{children:"This guide explains how to deploy InterLink components using systemd services for production environments. Systemd provides automatic startup, restart on failure, proper logging, and robust service management."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Using systemd to manage InterLink components offers several advantages:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic startup"}),": Services start automatically on boot"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic restart"}),": Failed services are automatically restarted"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Centralized logging"}),": Logs are managed through journald"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Process supervision"}),": Systemd monitors service health"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security isolation"}),": Services run with limited privileges"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependency management"}),": Services start in the correct order"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"SystemD-enabled Linux distribution (most modern distributions)"}),"\n",(0,t.jsx)(n.li,{children:"Root access to create system services"}),"\n",(0,t.jsx)(n.li,{children:"InterLink binaries and configuration files"}),"\n",(0,t.jsx)(n.li,{children:"Basic understanding of systemd service files"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"system-setup",children:"System Setup"}),"\n",(0,t.jsx)(n.h3,{id:"create-system-user",children:"Create System User"}),"\n",(0,t.jsx)(n.p,{children:"First, create a dedicated system user for running InterLink services:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo useradd --system --create-home --home-dir /opt/interlink --shell /bin/bash interlink\nsudo mkdir -p /opt/interlink/{bin,config,logs}\nsudo chown -R interlink:interlink /opt/interlink\n"})}),"\n",(0,t.jsx)(n.h3,{id:"copy-binaries-and-configuration",children:"Copy Binaries and Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Move your InterLink components to the system directories:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Copy binaries\nsudo cp $HOME/.interlink/bin/* /opt/interlink/bin/\nsudo cp $HOME/.interlink/manifests/interlink-remote.sh /opt/interlink/bin/\nsudo chmod +x /opt/interlink/bin/*\n\n# Copy configuration files\nsudo cp $HOME/.interlink/config/* /opt/interlink/config/\nsudo cp $HOME/.interlink/manifests/*.yaml /opt/interlink/config/\n\n# Set ownership\nsudo chown -R interlink:interlink /opt/interlink\n"})}),"\n",(0,t.jsx)(n.h2,{id:"service-configuration",children:"Service Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"oauth2-proxy-service",children:"OAuth2 Proxy Service"}),"\n",(0,t.jsx)(n.p,{children:"Create the OAuth2 proxy systemd service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-oauth2-proxy.service"',children:"[Unit]\nDescription=OAuth2 Proxy for InterLink\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nEnvironment=OAUTH2_PROXY_CONFIG=/opt/interlink/config/oauth2-proxy.cfg\nExecStart=/opt/interlink/bin/oauth2-proxy --config=/opt/interlink/config/oauth2-proxy.cfg\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/oauth2-proxy.log\nStandardError=append:/opt/interlink/logs/oauth2-proxy.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,t.jsx)(n.h3,{id:"interlink-api-server-service",children:"InterLink API Server Service"}),"\n",(0,t.jsx)(n.p,{children:"Create the InterLink API server systemd service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-api.service"',children:"[Unit]\nDescription=InterLink API Server\nAfter=network.target interlink-oauth2-proxy.service\nWants=network.target\nRequires=interlink-oauth2-proxy.service\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nEnvironment=INTERLINKCONFIGPATH=/opt/interlink/config/InterLinkConfig.yaml\nExecStart=/opt/interlink/bin/interlink\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/interlink-api.log\nStandardError=append:/opt/interlink/logs/interlink-api.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /opt/interlink/jobs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,t.jsx)(n.h3,{id:"plugin-service",children:"Plugin Service"}),"\n",(0,t.jsx)(n.p,{children:"Create the plugin systemd service (example for Docker plugin):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-docker-plugin.service"',children:"[Unit]\nDescription=InterLink Docker Plugin\nAfter=network.target docker.service interlink-api.service\nWants=network.target\nRequires=docker.service interlink-api.service\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nEnvironment=INTERLINKCONFIGPATH=/opt/interlink/config/plugin-config.yaml\nExecStart=/opt/interlink/bin/plugin\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/plugin.log\nStandardError=append:/opt/interlink/logs/plugin.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /opt/interlink/jobs /tmp /var/run/docker.sock\nPrivateTmp=true\n\n# Docker access\nSupplementaryGroups=docker\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,t.jsx)(n.h3,{id:"slurm-plugin-service",children:"SLURM Plugin Service"}),"\n",(0,t.jsx)(n.p,{children:"For SLURM plugin environments:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-slurm-plugin.service"',children:"[Unit]\nDescription=InterLink SLURM Plugin\nAfter=network.target interlink-api.service\nWants=network.target\nRequires=interlink-api.service\n\n[Service]\nType=simple\nUser=interlink\nGroup=interlink\nWorkingDirectory=/opt/interlink\nEnvironment=SLURMCONFIGPATH=/opt/interlink/config/plugin-config.yaml\nExecStart=/opt/interlink/bin/plugin\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=append:/opt/interlink/logs/plugin.log\nStandardError=append:/opt/interlink/logs/plugin.log\n\n# Security settings\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/interlink/logs /opt/interlink/jobs /tmp\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,t.jsx)(n.h2,{id:"log-management",children:"Log Management"}),"\n",(0,t.jsx)(n.h3,{id:"log-rotation-configuration",children:"Log Rotation Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Create log rotation configuration to prevent log files from growing too large:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/logrotate.d/interlink"',children:"/opt/interlink/logs/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    postrotate\n        systemctl reload interlink-oauth2-proxy interlink-api interlink-*-plugin 2>/dev/null || true\n    endscript\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"service-management",children:"Service Management"}),"\n",(0,t.jsx)(n.h3,{id:"enable-and-start-services",children:"Enable and Start Services"}),"\n",(0,t.jsx)(n.p,{children:"Enable services to start on boot and start them in the correct order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Enable services to start on boot\nsudo systemctl daemon-reload\nsudo systemctl enable interlink-oauth2-proxy interlink-api interlink-docker-plugin\n\n# Start services in order\nsudo systemctl start interlink-oauth2-proxy\nsudo systemctl start interlink-api\nsudo systemctl start interlink-docker-plugin\n\n# Check service status\nsudo systemctl status interlink-oauth2-proxy\nsudo systemctl status interlink-api\nsudo systemctl status interlink-docker-plugin\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-operations",children:"Common Operations"}),"\n",(0,t.jsx)(n.p,{children:"Common systemd operations for managing InterLink services:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# View service logs\nsudo journalctl -u interlink-api -f\nsudo journalctl -u interlink-oauth2-proxy -f\nsudo journalctl -u interlink-docker-plugin -f\n\n# Restart a service\nsudo systemctl restart interlink-api\n\n# Stop all InterLink services\nsudo systemctl stop interlink-docker-plugin interlink-api interlink-oauth2-proxy\n\n# Start all InterLink services\nsudo systemctl start interlink-oauth2-proxy interlink-api interlink-docker-plugin\n\n# View service configuration\nsudo systemctl cat interlink-api\n\n# Check service dependencies\nsudo systemctl list-dependencies interlink-api\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-health-checks",children:"Monitoring and Health Checks"}),"\n",(0,t.jsx)(n.h3,{id:"create-health-check-script",children:"Create Health Check Script"}),"\n",(0,t.jsx)(n.p,{children:"Create a simple health check script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="/opt/interlink/bin/health-check.sh"',children:'#!/bin/bash\n\n# Health check script for InterLink services\nSOCKET_PATH="/opt/interlink/.interlink.sock"\nLOG_FILE="/opt/interlink/logs/health-check.log"\n\necho "$(date): Starting health check" >> "$LOG_FILE"\n\n# Check if socket exists and is responding\nif [ -S "$SOCKET_PATH" ]; then\n    response=$(curl -s --unix-socket "$SOCKET_PATH" http://unix/pinglink)\n    if [ $? -eq 0 ]; then\n        echo "$(date): Health check passed - $response" >> "$LOG_FILE"\n        exit 0\n    else\n        echo "$(date): Health check failed - no response from socket" >> "$LOG_FILE"\n        exit 1\n    fi\nelse\n    echo "$(date): Health check failed - socket not found" >> "$LOG_FILE"\n    exit 1\nfi\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Make executable\nsudo chmod +x /opt/interlink/bin/health-check.sh\nsudo chown interlink:interlink /opt/interlink/bin/health-check.sh\n"})}),"\n",(0,t.jsx)(n.h3,{id:"systemd-timer-for-health-checks",children:"Systemd Timer for Health Checks"}),"\n",(0,t.jsx)(n.p,{children:"Add a systemd timer for regular health checks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-health-check.service"',children:"[Unit]\nDescription=InterLink Health Check\nAfter=interlink-api.service\nRequires=interlink-api.service\n\n[Service]\nType=oneshot\nUser=interlink\nGroup=interlink\nExecStart=/opt/interlink/bin/health-check.sh\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",metastring:'title="/etc/systemd/system/interlink-health-check.timer"',children:"[Unit]\nDescription=Run InterLink Health Check every 5 minutes\nRequires=interlink-health-check.service\n\n[Timer]\nOnCalendar=*:0/5\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n"})}),"\n",(0,t.jsx)(n.p,{children:"Enable the health check timer:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\nsudo systemctl enable interlink-health-check.timer\nsudo systemctl start interlink-health-check.timer\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Check service status\nsudo systemctl status interlink-api --no-pager -l\n\n# View recent logs\nsudo journalctl -u interlink-api --since "1 hour ago"\n\n# Check configuration syntax\nsudo systemd-analyze verify /etc/systemd/system/interlink-api.service\n\n# View service dependencies\nsudo systemctl list-dependencies interlink-api\n\n# Reset failed state\nsudo systemctl reset-failed interlink-api\n'})}),"\n",(0,t.jsx)(n.h3,{id:"service-debugging",children:"Service Debugging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run service manually for debugging\nsudo -u interlink /opt/interlink/bin/interlink\n\n# Check environment variables\nsudo systemctl show interlink-api --property=Environment\n\n# View service logs with priority\nsudo journalctl -u interlink-api -p err\n\n# Monitor service activity\nsudo systemctl status interlink-api --lines=50\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(n.p,{children:"The systemd configuration includes several security features:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dedicated user"}),": Services run as non-privileged ",(0,t.jsx)(n.code,{children:"interlink"})," user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Filesystem protection"}),": ",(0,t.jsx)(n.code,{children:"ProtectSystem"})," and ",(0,t.jsx)(n.code,{children:"ProtectHome"})," limit filesystem access"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No new privileges"}),": ",(0,t.jsx)(n.code,{children:"NoNewPrivileges"})," prevents privilege escalation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Private temp"}),": ",(0,t.jsx)(n.code,{children:"PrivateTmp"})," provides isolated temporary directories"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Minimal permissions"}),": ",(0,t.jsx)(n.code,{children:"ReadWritePaths"})," restricts write access to necessary directories"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"additional-security",children:"Additional Security"}),"\n",(0,t.jsx)(n.p,{children:"For additional security, consider:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Set up firewall rules\nsudo ufw allow 30443/tcp comment "OAuth2 Proxy"\nsudo ufw allow from <kubernetes-cluster-cidr> to any port 3000 comment "InterLink API"\n\n# Secure configuration files\nsudo chmod 640 /opt/interlink/config/*\nsudo chown root:interlink /opt/interlink/config/*\n\n# Secure log directory\nsudo chmod 750 /opt/interlink/logs\nsudo chown interlink:interlink /opt/interlink/logs\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"resource-limits",children:"Resource Limits"}),"\n",(0,t.jsx)(n.p,{children:"Add resource limits to service files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[Service]\n# Memory limits\nMemoryMax=2G\nMemoryHigh=1.5G\n\n# CPU limits\nCPUQuota=200%\n\n# Process limits\nLimitNOFILE=65536\nLimitNPROC=4096\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-environment",children:"Custom Environment"}),"\n",(0,t.jsx)(n.p,{children:"Set custom environment variables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[Service]\nEnvironment=LOG_LEVEL=debug\nEnvironment=CUSTOM_CONFIG=/opt/interlink/custom.yaml\nEnvironmentFile=/opt/interlink/config/env.conf\n"})}),"\n",(0,t.jsx)(n.h3,{id:"notifications",children:"Notifications"}),"\n",(0,t.jsx)(n.p,{children:"Configure systemd notifications:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[Service]\nType=notify\nNotifyAccess=all\nWatchdogSec=30\n"})}),"\n",(0,t.jsx)(n.p,{children:"This comprehensive systemd setup provides a robust, secure, and manageable solution for deploying InterLink components in production environments."})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>o});var t=i(67294);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
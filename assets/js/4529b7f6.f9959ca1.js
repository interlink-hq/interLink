"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7902],{5481:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=t(5893),s=t(1151);const r={sidebar_position:2},o="Develop an interLink plugin",a={id:"guides/develop-a-plugin",title:"Develop an interLink plugin",description:"Learn how to develop your interLink plugin to manage containers on your remote",source:"@site/versioned_docs/version-0.5.x/guides/02-develop-a-plugin.md",sourceDirName:"guides",slug:"/guides/develop-a-plugin",permalink:"/interLink/docs/guides/develop-a-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/interlink-hq/interLink/versioned_docs/version-0.5.x/guides/02-develop-a-plugin.md",tags:[],version:"0.5.x",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Deploy your plugin",permalink:"/interLink/docs/guides/deploy-interlink"},next:{title:"OpenAPI references",permalink:"/interLink/docs/guides/api-reference"}},l={},d=[{value:"Plugin API Specification",id:"plugin-api-specification",level:2},{value:"Setup the python SDK",id:"setup-the-python-sdk",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Install the SDK",id:"install-the-sdk",level:3},{value:"Understanding the Plugin Architecture",id:"understanding-the-plugin-architecture",level:2},{value:"Core Data Structures",id:"core-data-structures",level:3},{value:"PodCreateRequests",id:"podcreaterequests",level:4},{value:"PodStatus",id:"podstatus",level:4},{value:"CreateStruct",id:"createstruct",level:4},{value:"Plugin Interface Requirements",id:"plugin-interface-requirements",level:2},{value:"POST /create",id:"post-create",level:3},{value:"POST /delete",id:"post-delete",level:3},{value:"GET /status",id:"get-status",level:3},{value:"GET /getLogs",id:"get-getlogs",level:3},{value:"Developing with the Python SDK",id:"developing-with-the-python-sdk",level:2},{value:"Basic Plugin Structure",id:"basic-plugin-structure",level:3},{value:"Advanced Plugin Features",id:"advanced-plugin-features",level:3},{value:"Volume Handling",id:"volume-handling",level:4},{value:"Resource Management",id:"resource-management",level:4},{value:"Environment Variables and Secrets",id:"environment-variables-and-secrets",level:4},{value:"Testing Your Plugin",id:"testing-your-plugin",level:2},{value:"Local Testing",id:"local-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Deployment and Configuration",id:"deployment-and-configuration",level:2},{value:"Plugin Configuration",id:"plugin-configuration",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"SLURM Plugin",id:"slurm-plugin",level:3},{value:"Cloud Provider Plugin",id:"cloud-provider-plugin",level:3},{value:"Kubernetes Plugin (Cross-Cluster)",id:"kubernetes-plugin-cross-cluster",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Running Your Plugin",id:"running-your-plugin",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Production Mode",id:"production-mode",level:3},{value:"Dockerfile Example",id:"dockerfile-example",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"develop-an-interlink-plugin",children:"Develop an interLink plugin"}),"\n",(0,i.jsx)(n.p,{children:"Learn how to develop your interLink plugin to manage containers on your remote\nhost."}),"\n",(0,i.jsxs)(n.p,{children:["We are going to follow up\n",(0,i.jsx)(n.a,{href:"/interLink/docs/cookbook/edge",children:"the setup of an interlink node"})," with the last piece of\nthe puzzle:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"setup of a python SDK"}),"\n",(0,i.jsx)(n.li,{children:"demoing the fundamentals development of a plugin executing containers locally\nthrough the host docker daemon"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"The python SDK also produce an openAPI spec through FastAPI, therefore you can\nuse any language you want as long as the API spec is satisfied."})}),"\n",(0,i.jsx)(n.h2,{id:"plugin-api-specification",children:"Plugin API Specification"}),"\n",(0,i.jsx)(n.p,{children:"Before diving into development, familiarize yourself with the complete plugin API specification. The OpenAPI specification defines all the endpoints, request/response schemas, and data types your plugin must implement:"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udccb ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{target:"_blank",href:t(3334).Z+"",children:"Plugin OpenAPI Specification"})})]}),"\n",(0,i.jsx)(n.p,{children:"This specification is the authoritative reference for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Required HTTP endpoints (",(0,i.jsx)(n.code,{children:"/create"}),", ",(0,i.jsx)(n.code,{children:"/delete"}),", ",(0,i.jsx)(n.code,{children:"/status"}),", ",(0,i.jsx)(n.code,{children:"/getLogs"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Request and response data structures"}),"\n",(0,i.jsx)(n.li,{children:"Error handling and status codes"}),"\n",(0,i.jsx)(n.li,{children:"Authentication requirements"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Any plugin implementation in any programming language must comply with this API specification to work with interLink."}),"\n",(0,i.jsx)(n.h2,{id:"setup-the-python-sdk",children:"Setup the python SDK"}),"\n",(0,i.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The tutorial is done on a Ubuntu VM, but there are not hard requirements\naround that"}),"\n",(0,i.jsxs)(n.li,{children:["Python>=3.10 and pip (",(0,i.jsx)(n.code,{children:"sudo apt install -y python3-pip"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Any python IDE will work and it is strongly suggested to use one :)"}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"docker engine running"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"install-the-sdk",children:"Install the SDK"}),"\n",(0,i.jsxs)(n.p,{children:["Look for the latest release on\n",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interLink/releases",children:"the release page"})," and set\nthe environment variable ",(0,i.jsx)(n.code,{children:"VERSION"})," to it. Then you are ready to install the\npython SDK with:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#export VERSION=X.X.X\n#pip install "uvicorn[standard]" "git+https://github.com/interlink-hq/interlink-plugin-sdk@${VERSION}"\n\n# Or download the latest one with\npip install "uvicorn[standard]" "git+https://github.com/interlink-hq/interlink-plugin-sdk"\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-plugin-architecture",children:"Understanding the Plugin Architecture"}),"\n",(0,i.jsx)(n.p,{children:'InterLink plugins act as "sidecar" containers that handle the actual execution of workloads on remote resources. The plugin communicates with the interLink API server via REST endpoints and translates Kubernetes pod specifications into commands suitable for your target infrastructure.'}),"\n",(0,i.jsx)(n.h3,{id:"core-data-structures",children:"Core Data Structures"}),"\n",(0,i.jsx)(n.p,{children:"The plugin interface uses several key data structures defined in the interLink types:"}),"\n",(0,i.jsx)(n.h4,{id:"podcreaterequests",children:"PodCreateRequests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "pod": {...},           // Standard Kubernetes Pod spec\n    "configmaps": [...],    // Associated ConfigMaps\n    "secrets": [...],       // Associated Secrets\n    "projectedvolumesmaps": [...],  // ServiceAccount projected volumes\n    "jobscriptURL": ""      // Optional job script builder endpoint\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"podstatus",children:"PodStatus"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "name": "pod-name",\n    "UID": "pod-uid",\n    "namespace": "default",\n    "JID": "remote-job-id",\n    "containers": [...],     // Container status array\n    "initContainers": [...]  // Init container status array\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"createstruct",children:"CreateStruct"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "PodUID": "kubernetes-pod-uid",\n    "PodJID": "remote-system-job-id"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"plugin-interface-requirements",children:"Plugin Interface Requirements"}),"\n",(0,i.jsx)(n.p,{children:"Your plugin must implement the following REST API endpoints:"}),"\n",(0,i.jsx)(n.h3,{id:"post-create",children:"POST /create"}),"\n",(0,i.jsx)(n.p,{children:"Creates one or more pods on the remote system."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Request Body"}),": ",(0,i.jsx)(n.code,{children:"List[PodCreateRequests]"}),"\n",(0,i.jsx)(n.strong,{children:"Response"}),": ",(0,i.jsx)(n.code,{children:"List[CreateStruct]"})]}),"\n",(0,i.jsx)(n.h3,{id:"post-delete",children:"POST /delete"}),"\n",(0,i.jsx)(n.p,{children:"Deletes a pod from the remote system."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Request Body"}),": ",(0,i.jsx)(n.code,{children:"PodStatus"}),"\n",(0,i.jsx)(n.strong,{children:"Response"}),": Success/error status"]}),"\n",(0,i.jsx)(n.h3,{id:"get-status",children:"GET /status"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves the current status of one or more pods."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query Parameters"}),": List of pod UIDs\n",(0,i.jsx)(n.strong,{children:"Response"}),": ",(0,i.jsx)(n.code,{children:"List[PodStatus]"})]}),"\n",(0,i.jsx)(n.h3,{id:"get-getlogs",children:"GET /getLogs"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves logs from a specific container."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query Parameters"}),": Pod UID, container name, log options\n",(0,i.jsx)(n.strong,{children:"Response"}),": Container logs (plain text)"]}),"\n",(0,i.jsx)(n.h2,{id:"developing-with-the-python-sdk",children:"Developing with the Python SDK"}),"\n",(0,i.jsx)(n.h3,{id:"basic-plugin-structure",children:"Basic Plugin Structure"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete example of a Docker-based plugin using the interLink Python SDK:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import interlink\nfrom fastapi.responses import PlainTextResponse\nfrom fastapi import FastAPI, HTTPException\nfrom typing import List\nimport docker\nimport re\nimport os\n\n# Initialize Docker client\ndocker_client = docker.DockerClient()\napp = FastAPI()\n\nclass MyProvider(interlink.provider.Provider):\n    def __init__(self, docker):\n        super().__init__(docker)\n        self.container_pod_map = {}\n        \n        # Recover already running containers\n        statuses = self.docker.api.containers(all=True)\n        for status in statuses:\n            name = status["Names"][0]\n            if len(name.split("-")) > 1:\n                uid = "-".join(name.split("-")[-5:])\n                self.container_pod_map.update({uid: [status["Id"]]})\n\n    def create(self, pod: interlink.Pod) -> None:\n        """Create a pod by running Docker containers"""\n        container = pod.pod.spec.containers[0]\n        \n        # Handle volumes if present\n        if pod.pod.spec.volumes:\n            self.dump_volumes(pod.pod.spec.volumes, pod.container)\n        \n        # Set up volume mounts\n        volumes = []\n        if container.volume_mounts:\n            for mount in container.volume_mounts:\n                if mount.sub_path:\n                    volumes.append(\n                        f"{pod.pod.metadata.namespace}-{mount.name}/{mount.sub_path}:{mount.mount_path}"\n                    )\n                else:\n                    volumes.append(\n                        f"{pod.pod.metadata.namespace}-{mount.name}:{mount.mount_path}"\n                    )\n        \n        try:\n            # Prepare command and arguments\n            cmds = " ".join(container.command) if container.command else ""\n            args = " ".join(container.args) if container.args else ""\n            \n            # Run the container\n            docker_container = self.docker.containers.run(\n                f"{container.image}",\n                f"{cmds} {args}".strip(),\n                name=f"{container.name}-{pod.pod.metadata.uid}",\n                detach=True,\n                volumes=volumes,\n                # Add additional Docker options as needed\n                # environment=container.env,\n                # ports=container.ports,\n            )\n            \n            # Store container mapping\n            self.container_pod_map.update({\n                pod.pod.metadata.uid: [docker_container.id]\n            })\n            \n        except Exception as ex:\n            raise HTTPException(status_code=500, detail=str(ex))\n\n    def delete(self, pod: interlink.PodRequest) -> None:\n        """Delete a pod by removing its containers"""\n        try:\n            container_id = self.container_pod_map[pod.metadata.uid][0]\n            container = self.docker.containers.get(container_id)\n            container.remove(force=True)\n            self.container_pod_map.pop(pod.metadata.uid)\n        except KeyError:\n            raise HTTPException(\n                status_code=404, \n                detail="No containers found for UUID"\n            )\n\n    def status(self, pod: interlink.PodRequest) -> interlink.PodStatus:\n        """Get the current status of a pod"""\n        try:\n            container_id = self.container_pod_map[pod.metadata.uid][0]\n            container = self.docker.containers.get(container_id)\n            status = container.status\n        except KeyError:\n            raise HTTPException(\n                status_code=404, \n                detail="No containers found for UUID"\n            )\n        \n        # Map Docker status to Kubernetes container status\n        if status == "running":\n            statuses = self.docker.api.containers(\n                filters={"status": "running", "id": container.id}\n            )\n            started_at = statuses[0]["Created"]\n            \n            return interlink.PodStatus(\n                name=pod.metadata.name,\n                UID=pod.metadata.uid,\n                namespace=pod.metadata.namespace,\n                containers=[\n                    interlink.ContainerStatus(\n                        name=pod.spec.containers[0].name,\n                        state=interlink.ContainerStates(\n                            running=interlink.StateRunning(started_at=started_at),\n                            waiting=None,\n                            terminated=None,\n                        ),\n                    )\n                ],\n            )\n        elif status == "exited":\n            # Extract exit code from status\n            statuses = self.docker.api.containers(\n                filters={"status": "exited", "id": container.id}\n            )\n            reason = statuses[0]["Status"]\n            pattern = re.compile(r"Exited \\((.*?)\\)")\n            \n            exit_code = -1\n            for match in re.findall(pattern, reason):\n                exit_code = int(match)\n            \n            return interlink.PodStatus(\n                name=pod.metadata.name,\n                UID=pod.metadata.uid,\n                namespace=pod.metadata.namespace,\n                containers=[\n                    interlink.ContainerStatus(\n                        name=pod.spec.containers[0].name,\n                        state=interlink.ContainerStates(\n                            running=None,\n                            waiting=None,\n                            terminated=interlink.StateTerminated(\n                                reason=reason, \n                                exitCode=exit_code\n                            ),\n                        ),\n                    )\n                ],\n            )\n        \n        # Default completed status\n        return interlink.PodStatus(\n            name=pod.metadata.name,\n            UID=pod.metadata.uid,\n            namespace=pod.metadata.namespace,\n            containers=[\n                interlink.ContainerStatus(\n                    name=pod.spec.containers[0].name,\n                    state=interlink.ContainerStates(\n                        running=None,\n                        waiting=None,\n                        terminated=interlink.StateTerminated(\n                            reason="Completed", \n                            exitCode=0\n                        ),\n                    ),\n                )\n            ],\n        )\n\n    def Logs(self, req: interlink.LogRequest) -> bytes:\n        """Retrieve logs from a container"""\n        try:\n            container_id = self.container_pod_map[req.pod_uid][0]\n            container = self.docker.containers.get(container_id)\n            log = container.logs(\n                timestamps=req.Opts.Timestamps if hasattr(req.Opts, \'Timestamps\') else False,\n                tail=req.Opts.Tail if hasattr(req.Opts, \'Tail\') else \'all\'\n            )\n            return log\n        except KeyError:\n            raise HTTPException(\n                status_code=404, \n                detail="No containers found for UUID"\n            )\n\n    def dump_volumes(self, pod_volumes: List, container_volumes: List) -> List[str]:\n        """Handle ConfigMaps, Secrets, and other volume types"""\n        data_list = []\n        \n        for volume in container_volumes:\n            # Handle ConfigMaps\n            if volume.config_maps:\n                for config_map in volume.config_maps:\n                    for pod_vol in pod_volumes:\n                        if (pod_vol.volume_source.config_map and \n                            pod_vol.name == config_map.metadata.name):\n                            \n                            for filename, content in config_map.data.items():\n                                path = f"{config_map.metadata.namespace}-{config_map.metadata.name}/{filename}"\n                                os.makedirs(os.path.dirname(path), exist_ok=True)\n                                \n                                with open(path, "w") as f:\n                                    f.write(content)\n                                data_list.append(path)\n            \n            # Handle Secrets (base64 decode)\n            if volume.secrets:\n                for secret in volume.secrets:\n                    # Similar logic for secrets\n                    pass\n            \n            # Handle EmptyDirs\n            if volume.empty_dirs:\n                # Create empty directories\n                pass\n        \n        return data_list\n\n# Initialize provider\nprovider = MyProvider(docker_client)\n\n# FastAPI endpoints\n@app.post("/create")\nasync def create_pod(pods: List[interlink.Pod]) -> List[interlink.CreateStruct]:\n    return provider.create_pod(pods)\n\n@app.post("/delete")\nasync def delete_pod(pod: interlink.PodRequest) -> str:\n    return provider.delete_pod(pod)\n\n@app.get("/status")\nasync def status_pod(pods: List[interlink.PodRequest]) -> List[interlink.PodStatus]:\n    return provider.get_status(pods)\n\n@app.get("/getLogs", response_class=PlainTextResponse)\nasync def get_logs(req: interlink.LogRequest) -> bytes:\n    return provider.get_logs(req)\n\n# Run the server\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-plugin-features",children:"Advanced Plugin Features"}),"\n",(0,i.jsx)(n.h4,{id:"volume-handling",children:"Volume Handling"}),"\n",(0,i.jsx)(n.p,{children:"The plugin can handle various Kubernetes volume types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def handle_persistent_volumes(self, pod_spec):\n    """Example of handling PersistentVolumeClaims"""\n    for volume in pod_spec.volumes:\n        if volume.persistent_volume_claim:\n            pvc_name = volume.persistent_volume_claim.claim_name\n            # Mount the PVC to your remote system\n            self.mount_pvc(pvc_name, volume.name)\n\ndef handle_projected_volumes(self, projected_volumes):\n    """Handle ServiceAccount tokens and projected volumes"""\n    for pv_map in projected_volumes:\n        for filename, content in pv_map.data.items():\n            # Write ServiceAccount tokens, CA certificates, etc.\n            self.write_projected_file(filename, content)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"resource-management",children:"Resource Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def apply_resource_limits(self, container_spec, docker_params):\n    \"\"\"Apply CPU and memory limits to containers\"\"\"\n    if container_spec.resources:\n        if container_spec.resources.limits:\n            limits = container_spec.resources.limits\n            if 'cpu' in limits:\n                # Convert Kubernetes CPU units to Docker format\n                docker_params['cpu_period'] = 100000\n                docker_params['cpu_quota'] = int(float(limits['cpu']) * 100000)\n            if 'memory' in limits:\n                # Convert memory units (Ki, Mi, Gi)\n                docker_params['mem_limit'] = self.parse_memory(limits['memory'])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"environment-variables-and-secrets",children:"Environment Variables and Secrets"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def setup_environment(self, container_spec, secrets, config_maps):\n    """Set up environment variables from various sources"""\n    env_vars = {}\n    \n    # Direct environment variables\n    for env in container_spec.env or []:\n        if env.value:\n            env_vars[env.name] = env.value\n        elif env.value_from:\n            # Handle valueFrom sources\n            if env.value_from.secret_key_ref:\n                secret_name = env.value_from.secret_key_ref.name\n                secret_key = env.value_from.secret_key_ref.key\n                env_vars[env.name] = self.get_secret_value(secrets, secret_name, secret_key)\n            elif env.value_from.config_map_key_ref:\n                cm_name = env.value_from.config_map_key_ref.name\n                cm_key = env.value_from.config_map_key_ref.key\n                env_vars[env.name] = self.get_configmap_value(config_maps, cm_name, cm_key)\n    \n    return env_vars\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-your-plugin",children:"Testing Your Plugin"}),"\n",(0,i.jsx)(n.h3,{id:"local-testing",children:"Local Testing"}),"\n",(0,i.jsx)(n.p,{children:"Create a simple test script to verify your plugin endpoints:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import requests\nimport json\n\n# Test data\ntest_pod = {\n    "pod": {\n        "metadata": {"name": "test-pod", "uid": "test-uid", "namespace": "default"},\n        "spec": {\n            "containers": [{\n                "name": "test-container",\n                "image": "nginx:latest",\n                "command": ["nginx"],\n                "args": ["-g", "daemon off;"]\n            }]\n        }\n    },\n    "configmaps": [],\n    "secrets": [],\n    "projectedvolumesmaps": []\n}\n\n# Test creation\nresponse = requests.post("http://localhost:8000/create", json=[test_pod])\nprint(f"Create response: {response.json()}")\n\n# Test status\nresponse = requests.get("http://localhost:8000/status", params={"pod_uid": "test-uid"})\nprint(f"Status response: {response.json()}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(n.p,{children:"Use the interLink test suite to verify your plugin works with the full system:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build your plugin image\ndocker build -t my-plugin:latest .\n\n# Update plugin configuration\nexport PLUGIN_IMAGE=my-plugin:latest\nexport PLUGIN_PORT=8000\n\n# Run integration tests\nmake test\n"})}),"\n",(0,i.jsx)(n.h2,{id:"deployment-and-configuration",children:"Deployment and Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"plugin-configuration",children:"Plugin Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Create a configuration file for your plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# plugin-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: plugin-config\ndata:\n  plugin.yaml: |\n    plugin:\n      endpoint: "http://plugin-service:8000"\n      authentication:\n        type: "bearer"\n        token: "your-auth-token"\n      timeout: 30s\n'})}),"\n",(0,i.jsx)(n.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,i.jsx)(n.p,{children:"Deploy your plugin as a Kubernetes service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-plugin\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-plugin\n  template:\n    metadata:\n      labels:\n        app: my-plugin\n    spec:\n      containers:\n      - name: plugin\n        image: my-plugin:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: PLUGIN_CONFIG\n          value: "/etc/plugin/config.yaml"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: plugin-service\nspec:\n  selector:\n    app: my-plugin\n  ports:\n  - port: 8000\n    targetPort: 8000\n'})}),"\n",(0,i.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,i.jsx)(n.h3,{id:"slurm-plugin",children:"SLURM Plugin"}),"\n",(0,i.jsx)(n.p,{children:"For HPC workloads using SLURM:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class SLURMProvider(interlink.provider.Provider):\n    def create(self, pod: interlink.Pod) -> None:\n        # Convert pod spec to SLURM job script\n        job_script = self.generate_slurm_script(pod)\n        \n        # Submit to SLURM\n        result = subprocess.run(\n            ["sbatch", "--parsable"],\n            input=job_script,\n            capture_output=True,\n            text=True\n        )\n        \n        job_id = result.stdout.strip()\n        self.job_pod_map[pod.pod.metadata.uid] = job_id\n    \n    def generate_slurm_script(self, pod):\n        container = pod.pod.spec.containers[0]\n        return f"""#!/bin/bash\n#SBATCH --job-name={pod.pod.metadata.name}\n#SBATCH --output=job_%j.out\n#SBATCH --error=job_%j.err\n\n# Run container with Singularity/Apptainer\nsingularity exec {container.image} {\' \'.join(container.command or [])}\n"""\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cloud-provider-plugin",children:"Cloud Provider Plugin"}),"\n",(0,i.jsx)(n.p,{children:"For cloud platforms like AWS ECS or Google Cloud Run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class CloudProvider(interlink.provider.Provider):\n    def create(self, pod: interlink.Pod) -> None:\n        # Convert to cloud-native format\n        task_definition = self.pod_to_task_definition(pod)\n        \n        # Submit to cloud provider\n        response = self.cloud_client.run_task(\n            taskDefinition=task_definition,\n            cluster=self.cluster_name\n        )\n        \n        task_arn = response['tasks'][0]['taskArn']\n        self.task_pod_map[pod.pod.metadata.uid] = task_arn\n"})}),"\n",(0,i.jsx)(n.h3,{id:"kubernetes-plugin-cross-cluster",children:"Kubernetes Plugin (Cross-Cluster)"}),"\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interlink-kubernetes-plugin",children:"interLink Kubernetes Plugin"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class KubernetesProvider(interlink.provider.Provider):\n    def __init__(self, remote_kubeconfig):\n        super().__init__()\n        self.k8s_client = kubernetes.client.ApiClient(\n            kubernetes.config.load_kube_config(remote_kubeconfig)\n        )\n        self.core_v1 = kubernetes.client.CoreV1Api(self.k8s_client)\n    \n    def create(self, pod: interlink.Pod) -> None:\n        # Handle volume offloading\n        self.sync_volumes(pod)\n        \n        # Handle microservice offloading with TCP tunnels\n        if self.has_exposed_ports(pod):\n            self.setup_tcp_tunnel(pod)\n        \n        # Create pod on remote cluster\n        try:\n            response = self.core_v1.create_namespaced_pod(\n                namespace=pod.pod.metadata.namespace,\n                body=pod.pod\n            )\n            self.pod_map[pod.pod.metadata.uid] = response.metadata.name\n        except kubernetes.client.ApiException as e:\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    def sync_volumes(self, pod):\n        """Sync ConfigMaps, Secrets, and PVCs to remote cluster"""\n        for volume in pod.container:\n            if volume.config_maps:\n                for cm in volume.config_maps:\n                    self.create_or_update_configmap(cm)\n            if volume.secrets:\n                for secret in volume.secrets:\n                    self.create_or_update_secret(secret)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Always provide meaningful error messages and appropriate HTTP status codes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logging"}),": Implement comprehensive logging for debugging and monitoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Cleanup"}),": Ensure proper cleanup of resources when pods are deleted"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State Persistence"}),": Consider persisting plugin state to handle restarts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Implement proper authentication and authorization for your plugin endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring"}),": Add health checks and metrics endpoints for observability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Idempotency"}),": Make operations idempotent to handle retries gracefully"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Limits"}),": Always respect and enforce Kubernetes resource limits"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Graceful Shutdown"}),": Handle SIGTERM signals for graceful container shutdown"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"running-your-plugin",children:"Running Your Plugin"}),"\n",(0,i.jsx)(n.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install dependencies\npip install -r requirements.txt\n\n# Run with auto-reload\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n"})}),"\n",(0,i.jsx)(n.h3,{id:"production-mode",children:"Production Mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build container\ndocker build -t my-plugin:v1.0.0 .\n\n# Run container\ndocker run -d \\\n  --name my-plugin \\\n  -p 8000:8000 \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  my-plugin:v1.0.0\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dockerfile-example",children:"Dockerfile Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8000/health || exit 1\n\n# Run application\nCMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Explore the ",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interlink-kubernetes-plugin",children:"interLink Kubernetes Plugin"})," for a production example"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out the ",(0,i.jsx)(n.a,{href:"https://github.com/interlink-hq/interlink-plugin-sdk",children:"Plugin SDK documentation"})," for API details"]}),"\n",(0,i.jsxs)(n.li,{children:["Review the ",(0,i.jsx)(n.a,{href:"/interLink/docs/guides/monitoring",children:"monitoring guide"})," to add observability to your plugin"]}),"\n",(0,i.jsxs)(n.li,{children:["Study the ",(0,i.jsx)(n.a,{href:"/interLink/docs/guides/api-reference",children:"API reference"})," for detailed endpoint specifications"]}),"\n",(0,i.jsx)(n.li,{children:"Join the interLink community for support and contributions"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3334:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/files/plugin-openapi-0a8e18aeebba2b1694f51a77422bf97e.json"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(7294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7150],{34363:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var t=i(85893),r=i(11151);const s={sidebar_position:7},l="mTLS Deployment Guide",c={id:"guides/mtls-deployment",title:"mTLS Deployment Guide",description:"This guide covers how to deploy InterLink using mutual TLS (mTLS) authentication as an alternative to OIDC. mTLS provides strong cryptographic authentication without requiring an external identity provider.",source:"@site/versioned_docs/version-0.5.x/guides/07-mtls-deployment.mdx",sourceDirName:"guides",slug:"/guides/mtls-deployment",permalink:"/interLink/docs/0.5.x/guides/mtls-deployment",draft:!1,unlisted:!1,editUrl:"https://github.com/interlink-hq/interLink/versioned_docs/version-0.5.x/guides/07-mtls-deployment.mdx",tags:[],version:"0.5.x",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Enable service accounts",permalink:"/interLink/docs/0.5.x/guides/enable-service-accounts"},next:{title:"Systemd Deployment Guide",permalink:"/interLink/docs/0.5.x/guides/systemd-deployment"}},a={},o=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Certificate Generation",id:"certificate-generation",level:2},{value:"Generate Certificates for mTLS",id:"generate-certificates-for-mtls",level:3},{value:"Edge Node Setup",id:"edge-node-setup",level:2},{value:"Prepare Certificate Files",id:"prepare-certificate-files",level:3},{value:"Create mTLS Configuration",id:"create-mtls-configuration",level:3},{value:"Download and Configure InterLink Binary",id:"download-and-configure-interlink-binary",level:3},{value:"Start InterLink API Server",id:"start-interlink-api-server",level:3},{value:"Kubernetes Cluster Setup",id:"kubernetes-cluster-setup",level:2},{value:"Create Kubernetes Secrets for Certificates",id:"create-kubernetes-secrets-for-certificates",level:3},{value:"Deploy with Helm Chart",id:"deploy-with-helm-chart",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Certificate Management",id:"certificate-management",level:3},{value:"Network Security",id:"network-security",level:3},{value:"Certificate Validation",id:"certificate-validation",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Commands",id:"debug-commands",level:3},{value:"Log Messages to Monitor",id:"log-messages-to-monitor",level:3},{value:"Testing Your Setup",id:"testing-your-setup",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mtls-deployment-guide",children:"mTLS Deployment Guide"}),"\n",(0,t.jsx)(n.p,{children:"This guide covers how to deploy InterLink using mutual TLS (mTLS) authentication as an alternative to OIDC. mTLS provides strong cryptographic authentication without requiring an external identity provider."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"mTLS (mutual TLS) is a security protocol that provides authentication of both the client and server using digital certificates. In the context of InterLink, mTLS secures communication between the Virtual Kubelet running in your Kubernetes cluster and the InterLink API server running on the edge node."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before setting up mTLS, ensure you have:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"A Certificate Authority (CA) certificate and private key"}),"\n",(0,t.jsx)(n.li,{children:"Server certificate and private key for the InterLink API server"}),"\n",(0,t.jsx)(n.li,{children:"Client certificate and private key for the Virtual Kubelet"}),"\n",(0,t.jsx)(n.li,{children:"Basic understanding of TLS/SSL certificate management"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"certificate-generation",children:"Certificate Generation"}),"\n",(0,t.jsx)(n.h3,{id:"generate-certificates-for-mtls",children:"Generate Certificates for mTLS"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Generate CA private key\nopenssl genrsa -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem -subj "/C=US/ST=CA/L=San Francisco/O=InterLink/CN=InterLink CA"\n\n# Generate server private key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate server certificate signing request\nopenssl req -subj "/C=US/ST=CA/L=San Francisco/O=InterLink/CN=interlink-server" -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate signed by CA\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extensions v3_req\n\n# Generate client private key\nopenssl genrsa -out client-key.pem 4096\n\n# Generate client certificate signing request\nopenssl req -subj "/C=US/ST=CA/L=San Francisco/O=InterLink/CN=interlink-client" -sha256 -new -key client-key.pem -out client.csr\n\n# Generate client certificate signed by CA\nopenssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -out client-cert.pem -extensions v3_req\n\n# Clean up CSR files\nrm server.csr client.csr\n'})}),"\n",(0,t.jsx)(n.h2,{id:"edge-node-setup",children:"Edge Node Setup"}),"\n",(0,t.jsx)(n.h3,{id:"prepare-certificate-files",children:"Prepare Certificate Files"}),"\n",(0,t.jsx)(n.p,{children:"First, copy your generated certificates to the appropriate locations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir -p $HOME/.interlink/certs\nmkdir -p $HOME/.interlink/config\nmkdir -p $HOME/.interlink/logs\nmkdir -p $HOME/.interlink/bin\n\n# Copy certificates (assuming you generated them as shown above)\ncp ca.pem server-cert.pem server-key.pem $HOME/.interlink/certs/\ncp ca.pem client-cert.pem client-key.pem $HOME/.interlink/certs/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-mtls-configuration",children:"Create mTLS Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Create the InterLink configuration file with mTLS settings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="$HOME/.interlink/config/InterLinkConfig.yaml"',children:'InterlinkAddress: https://0.0.0.0\nInterlinkPort: "3000"\nSidecarURL: http://plugin\nSidecarPort: "4000"\nVerboseLogging: true\nErrorsOnlyLogging: false\nDataRootFolder: "/tmp/interlink"\n\n# mTLS Configuration\nTLS:\n  Enabled: true\n  CertFile: "/home/myusername/.interlink/certs/server-cert.pem"\n  KeyFile: "/home/myusername/.interlink/certs/server-key.pem"\n  CACertFile: "/home/myusername/.interlink/certs/ca.pem"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"download-and-configure-interlink-binary",children:"Download and Configure InterLink Binary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export VERSION=$(curl -s https://api.github.com/repos/interlink-hq/interlink/releases/latest | jq -r .name)\nwget -O $HOME/.interlink/bin/interlink https://github.com/interlink-hq/interLink/releases/download/$VERSION/interlink_Linux_x86_64\nchmod +x $HOME/.interlink/bin/interlink\n"})}),"\n",(0,t.jsx)(n.h3,{id:"start-interlink-api-server",children:"Start InterLink API Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start InterLink API server with mTLS\nexport INTERLINKCONFIGPATH=$HOME/.interlink/config/InterLinkConfig.yaml\n$HOME/.interlink/bin/interlink &> $HOME/.interlink/logs/interlink.log &\necho $! > $HOME/.interlink/interlink.pid\n"})}),"\n",(0,t.jsx)(n.h2,{id:"kubernetes-cluster-setup",children:"Kubernetes Cluster Setup"}),"\n",(0,t.jsx)(n.h3,{id:"create-kubernetes-secrets-for-certificates",children:"Create Kubernetes Secrets for Certificates"}),"\n",(0,t.jsx)(n.p,{children:"Before deploying the Helm chart, create the necessary secrets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create namespace\nkubectl create namespace interlink\n\n# Create secret with client certificates for Virtual Kubelet\n# Note: The secret name must match the pattern: <nodeName>-tls-certs\n# where <nodeName> corresponds to the nodeName value in your helm values\nkubectl create secret generic my-node-tls-certs \\\n  --from-file=ca.crt=$HOME/.interlink/certs/ca.pem \\\n  --from-file=tls.crt=$HOME/.interlink/certs/client-cert.pem \\\n  --from-file=tls.key=$HOME/.interlink/certs/client-key.pem \\\n  -n interlink\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-with-helm-chart",children:"Deploy with Helm Chart"}),"\n",(0,t.jsx)(n.p,{children:"Create a custom values file for mTLS deployment:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create values file for mTLS\ncat > $HOME/.interlink/mtls-values.yaml << EOF\nnodeName: "my-node"\n\nvirtualNode:\n  resources:\n    CPUs: 8\n    memGiB: 49\n    pods: 100\n  HTTPProxies:\n    HTTP: null\n    HTTPs: null\n  HTTP:\n    insecure: true\n    CACert: ""\n  kubeletHTTP:\n    insecure: true\n  # Tracing configuration\n  tracing:\n    enabled: false\n\ninterlink:\n  enabled: false\n  address: https://172.16.213.51\n  port: 3000\n  tls:\n    enabled: true\n    certFile: "/etc/vk/certs/tls.crt"\n    keyFile: "/etc/vk/certs/tls.key"\n    caCertFile: "/etc/vk/certs/ca.crt"\nEOF\n\n# Deploy with mTLS configuration\nexport INTERLINK_CHART_VERSION="X.X.X"\nhelm upgrade --install \\\n  --create-namespace \\\n  -n interlink \\\n  my-node \\\n  oci://ghcr.io/interlink-hq/interlink-helm-chart/interlink \\\n  --version $INTERLINK_CHART_VERSION \\\n  --values $HOME/.interlink/mtls-values.yaml\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Remember to pick the ",(0,t.jsx)(n.a,{href:"https://github.com/interlink-hq/interlink-helm-chart/blob/main/interlink/Chart.yaml#L18",children:"version of the chart"})," and put it into the ",(0,t.jsx)(n.code,{children:"INTERLINK_CHART_VERSION"})," env var above."]})}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"certificate-management",children:"Certificate Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement regular certificate rotation for production deployments"}),"\n",(0,t.jsx)(n.li,{children:"Store private keys securely with restricted file permissions (600)"}),"\n",(0,t.jsx)(n.li,{children:"Keep CA private key highly secure and consider using a proper PKI solution"}),"\n",(0,t.jsx)(n.li,{children:"Monitor certificate expiration dates"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"network-security",children:"Network Security"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Example firewall configuration\nsudo ufw allow from <kubernetes-cluster-cidr> to any port 3000 comment "InterLink mTLS API"\nsudo ufw deny 3000 comment "Block public access to InterLink API"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"certificate-validation",children:"Certificate Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Verify certificate details and chain\nopenssl x509 -in server-cert.pem -text -noout\nopenssl verify -CAfile ca.pem server-cert.pem\n\n# Test mTLS connection\nopenssl s_client -connect YOUR_EDGE_NODE_IP:3000 -CAfile ca.pem -cert client-cert.pem -key client-key.pem\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Certificate verification errors"})," - Check certificate chain and CA"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Permission denied"})," - Verify file permissions and paths"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handshake failures"})," - Ensure client certificate is signed by the same CA"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check certificate chain\nopenssl verify -CAfile ca.pem client-cert.pem\n\n# Test server connectivity\ncurl -v --cacert ca.pem --cert client-cert.pem --key client-key.pem https://YOUR_EDGE_NODE_IP:3000/pinglink\n\n# Check InterLink logs for TLS errors\ntail -f $HOME/.interlink/logs/interlink.log | grep -i tls\n"})}),"\n",(0,t.jsx)(n.h3,{id:"log-messages-to-monitor",children:"Log Messages to Monitor"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Loaded CA certificate for TLS client"'}),"\n",(0,t.jsx)(n.li,{children:'"mTLS enabled - requiring client certificates"'}),"\n",(0,t.jsx)(n.li,{children:'"Failed to create TLS HTTP client"'}),"\n",(0,t.jsx)(n.li,{children:'"certificate verification failed"'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing-your-setup",children:"Testing Your Setup"}),"\n",(0,t.jsx)(n.p,{children:"Test the mTLS connection to ensure everything is working correctly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Test the pinglink endpoint\ncurl -v --cacert $HOME/.interlink/certs/ca.pem \\\n     --cert $HOME/.interlink/certs/client-cert.pem \\\n     --key $HOME/.interlink/certs/client-key.pem \\\n     https://YOUR_EDGE_NODE_IP:3000/pinglink\n"})}),"\n",(0,t.jsx)(n.p,{children:"If successful, you should receive a response indicating the InterLink service is running and accessible via mTLS."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["You can find a demo pod to test your setup ",(0,t.jsx)(n.a,{href:"../guides/develop-a-plugin#lets-test-is-out",children:"here"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>l});var t=i(67294);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);